CSS层叠样式表（Cascading Style Sheets）
	也称为css样式表和级联样式表
	美化网页 布局界面

CSS语法规范
	选择器以及一条或多条声明
		h1 { color: red;}
	属性和值以键值对的形式出现,
	属性值前面，冒号后面，保留一个空格。
	选择器（标签）和大括号后面也保留一个空格
	
CSS代码风格
	紧凑型式
	推荐 展开格式
	空格规范   
	属性冒号空格属性值color: red;
	选择器空格花括号h1 {}

CSS基础选择器
	作用：可以一次选取多个  选择标签用的 选对人 做对事
	CSS选择器参考手册（W3C）
	分类：基础选择器和复合选择器

基础选择器：
	1 标签选择器 如：p {} span {}

	2 类名选择器 如：.box{}  其中下方标签class调用某些标签的类名
        口诀：样式点定义，结构类调用
        一个标签可以拥有多个类名，之间空格隔开；多个标签可以拥有相同给的类名

	3  ID选择器 如：#nav{}  其中nav是某个标签的Id名
        口诀：样式#定义，结构id调用
        id和身份证号码一样，具有唯一性
        id一般情况下是给js使用的，除非特殊情况，否则不要使用id去设置样式
	4 通配符选择器 * {}
        选取页面中所有的元素
        一般用于： * {margin: 0; padding: 0;}
字体属性：
	font字体：
		1. font-style:字体风格
			属性		作用
			normal		默认值，浏览器会显示标准的字体样式  font-style: normal;
			italic		浏览器会显示斜体的字体样式。
		2.font-size:字体大小：
		          相对长度单位		说明
			em	相对于当前对象内文本的字体尺寸
			px	像素，最常用，推荐使用
			绝对长度单位	说明
			in		英寸
			cm		厘米
			mm		毫米
			pt		点

		3.font-family： Arial,"Microsoft Yahei", "微软雅黑";} 
            （网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑）
            注意点：想给界面英文单独设置字体，英文字体放到中文字体前面
            企业开发中常用的字体：
                中文：宋体/黑体/微软雅黑
                英文字体："Times New Roman"/Arial
		4.font-weight:字体粗细 
			属性值		         描述
			normal		默认值（不加粗的）
			bold		定义粗体（加粗的）
			100~900		400 等同于 normal，而 700 等同于 bold  我们重点记住这句话
			提倡：
			我们平时更喜欢用数字来表示加粗和不加粗。
		5.font:综合设置字体样式 (重点)
            选择器 { font: font-style  font-weight  font-size/line-height  font-family;}
            注意：
            使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。
            其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用
CSS文本样式:
	1.文本颜色color
		预定义颜色值、十六进制写法、RGB写法
		英文单词：如red,blue...
		rgb：称之为三原色(red,green,blue组成),rgb(10,10,10)深灰色，值越小偏灰色，值越大偏白色
		rgba：rgb称之为三原色，最后一个a为透明度
		十六进制：#ff0000,前两个为红，中间两个为绿色，后面两个蓝色
		    十六进制：0-F，逢十六进一
		   十六进制转十进制：第一位×16进制的第二位 = 十进制
		十六进制缩写：#f00,第一个为红，中间为绿色，第三个值为蓝色，必须两位数字相同才可以简写

	2.文本对齐text-align
        只能设置水平对齐方式
        center  right  left(默认值)

	3.装饰文本text-decoration
        none       无装饰
        underline   下划线
        overline    上划线
        line-through 删除线
        一般用于取消a默认的下划线
 
	4.文本缩进text-indent
        px   #像素单位   绝对单位
        em  #字距离单位 相对单位（1em是当前一个字的大小）
        可以是负数
        设置的是每个段落的首行缩进

	5.行间距line-height
		一般情况下，行距比字号大7.8像素左右就可以了。
		line-height: 24px;
CSS的引入方式（三种）
	1 行内式
	2 内部样式表（嵌入式）
	3外部样式表（外链式）
	4.也可以@import 'xxxx.css'导入样式
 行内式（内联样式）： 
	<标签名 style="属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"> 内容 </标签名>
内部样式表：
	<style>
		p {
			text-indent:  2em;
			line-height: 26px;
		}
	</style>
	一般放在head里 控制范围是整个页面 代码结构清晰
外部样式表（外链式）
	外部样式表
	开发中使用最多 适合样式较多的情况
	1 新建style.css
	2 在head里进入 <link href=”style.css” rel=”stylesheet”>
Chrome调试工具
	F12
	右键检查
	Elements
	1.Ctrl+ 滚轮可以放大开发者工具代码大小
	2.左边是HTML元素结构，右边是css样式
	3.右边css样式可以改动数值（左右箭头或者直接输入）和查看颜色
	4.Ctrl + 0 还原浏览器原有大小
	5.如果点击元素，发现右键没有样式引入，极有可能是类名或者样式引入错误
	6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误
Emmet语法
	Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。
	1.生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div>
	2.如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div
	3.如果有父子级关系的标签，可以用 >  比如   ul > li就可以了
	4.如果有兄弟关系的标签，用  +  就可以了 比如 div+p
	5.如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了
	6.如果生成的div 类名是有顺序的， 可以用 自增符号  $
	7.如果想要在生成的标签内部写内容可以用 { } 表示
	如：div{pink喜欢}*5
	      div{$}*5
快速生成CSS样式语法：
	css基本采取简写形式即可：
		1.比如w200  按tab可以生成   width：200px;
		2.比如lh26  按tab可以生成    line-height:26px;

快速格式化代码
	右键——格式化文档
	也可以设置当我们保存页面的时候自动格式化代码：
		1.文件---首选项----设置
		2.搜索emmet.include
		3.在settings.json下的用户种添加以下语句
		"editor.formatOnType": true,
		"editor.formatOnSave": true
		只需要设置一次即可，以后都可以自动保存格式化代码
CSS的复合选择器：
	后代、子代、并集、伪类
	1.后代选择器（子孙）：
		ol  li  {
			color：pink;
		}
	元素1和元素2中间空格隔开
	元素1是父级，元素2是子级，最终选择的是元素2
	元素2可以是儿子，也可以是孙子等，只要是元素1的后代即可
	元素1和元素2可以是任意基础选择器
	2.子代选择器（子孙）
	.nav>a { 
		color: red;
		}
	元素1和元素2中间用大于号隔开
	元素1是父级，元素2是子级，最终选择的是元素2
	元素2必须是亲儿子，其孙子、重孙子之类不归他管，您也可以叫他亲儿子选择器
	3.并集选择器（重要）
	可以选择多个选择器
	div, p { 
		color: pink;
	}

	通过英文模式下的逗号来分割
	任何形式的选择器都可以作为并集选择器的一部分
	最后一个选择器不要加逗号
	4.交集选择器
	    <p class="paral">我是段落</p>
	    p.paral {
	        color: red;
	    }
	5.相邻兄弟选择器 css2
	    相邻兄弟选择器只能选中紧跟其后的那个标签
	    必须+连接
                h4 + p {
                    color: darkred;
                }
    6.相邻兄弟通配选择器
        相邻兄弟通配选择器只能选中紧跟其后的所有标签
        必须~连接
                h4~p {
                    color: skyblue;
                }
	5.伪类选择器
		1 链接伪类选择器：
		a:link	/*选择所有未访问的链接*/
		a:visited	/*选择所有已被访问的链接*/
		a:hover	/*选择鼠标指针位 于其上鼠标经过的链接*/
		a:active	/*鼠标按下未弹起的链接*/
	为了生效注意顺序：助记lvha hate
	一般都要给a单独指定样式（去掉下划线和修改颜色）
		2 focus伪类选择器
		用于选取获得焦点的表单元素
		input:focus {
			background-color: yellow;
		}
css的元素显示模式:
	定义：元素（标签）以什么方式进行显示，比如自己独占一行，比如一行可以放多个。
	HTML元素一般分为块元素和行内元素
	1、块元素
		常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。
	块级元素的特点
	（1）比较霸道，自己独占一行
	（2）高度，宽度、外边距以及内边距都可以控制。
	（3）宽度默认是容器（父级宽度）的100%
	（4）是一个容器及盒子，里面可以放行内或者块级元素。
	注意：
		只有 文字才 能组成段落  因此 p  里面不能放块级元素，特别是 p 不能放div
		同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。
	2、行内元素
		常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，
		其中<span>标签最典型的行内元素。有的地方也成内联元素
	行内元素的特点：
	（1）相邻行内元素在一行上，一行可以显示多个。
	（2）高、宽直接设置是无效的。
	（3）默认宽度就是它本身内容的宽度。
	（4）行内元素只能容纳文本或则其他行内元素。
	注意：
	链接里面不能再放链接。
	特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。
	3、行内块元素
		在行内元素中有几个特殊的标签	<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。
	行内块元素的特点：
	（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个
	（2）默认宽度就是它本身内容的宽度。
	（3）高度，行高、外边距以及内边距都可以控制。
元素显示模式总结：
		元素模式		元素排列		设置样式			默认宽度		包含
	块级元素		一行只能放一个块级元素	可以设置宽度高度		容器的100%	容器级可以包含任何标签
	行内元素		一行可以放多个行内元素	不可以直接设置宽度高度	它本身内容的宽度	容纳文本或则其他行内元素
	行内块元素	一行放多个行内块元素	可以设置宽度和高度		它本身内容的宽度
标签显示模式转换 display：
	块转行内：display:inline;
	行内转块：display:block;
	块、行内元素转换为行内块： display: inline-block;
一个小工具的使用snipaste：
	常用快捷方式：
	1.F1可以截图，同时测量大小，设置箭头  书写文字等
	2.F3在桌面置顶显示
	2.点击图片。alt可以取色（按下shift可以切换取色模式）
	4.按下esc取消图片显示
行文字垂直居中代码：line-height==height就可实现
	单行文字居中原理：
	行高   =  上距离 +  内容高度  + 下距离
	行高和高度的三种关系：
		如果 行高 等 高度  文字会 垂直居中
		如果行高 大于 高度   文字会 偏下
		如果行高小于高度   文字会  偏上
css的背景background：
	1.背景颜色(color)
	语法：background-color:颜色值;   默认的值是 transparent  透明的
	2.背景图片(image)
	2.背景图片(image)
		语法：background-image : none | url (url)
	3.背景平铺（repeat）
		语法：background-repeat : repeat | no-repeat | repeat-x | repeat-y 
	背景图片会压在背景颜色之上
	4.背景图片位置： 
		利用background-position属性可以改变图片在背景中的位置
		background-position： x轴	y轴;
		参数代表的意思是：x坐标和y坐标，可以使用方位名词或者精确单位
		参数值		说明
		length		百分数 | 有浮点数和单位标识符组成的长度值
		postion		top | center | bottom | left | center | right  方位名词
		1.参数是方位名词
		。如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left  top 和  top  left  效果一致
		。如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐
·		2.参数是精确单位
		。如果参数值是精确坐标，那么第一肯定是x坐标，第二个一定是y坐标
		3.参数是混合单位
		。如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标
	5.背景图片固定
		background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。
		background-attachment 后期可以制作视差滚动的效果。
				scroll:默认值。背景图像会随着页面其余部分的滚动而移动。
				fixed： 当页面的其余部分滚动时，背景图像不会移动。 
				inherit： 规定应该从父元素继承 background-attachment 属性的设置 
	6.背景样式合写
		background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;
背景图片和插入图片的区别：
        插入图片：占位置
        背景图片：不会占用位置，背景图片有定位属性，可以很方便控制图片的位置
        插入图片的语义要比背景图片的的语义要强，企业开发中如果图片要被搜索引擎搜索到就推荐使用插入图片
	7.背景色半透明
		background-color: rgba(0, 0, 0, .2);
		- 最后一个参数是 alpha 透明度，取值范围在 0~1之间
		- 我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);
		- 背景半透明是指盒子背景半透明，盒子里面的内容不受影响
		- CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用
	css三大特性:
		1、层叠性 
				相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题
					层叠性原则:
				- 样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式
				- 样式不冲突，不会层叠
		2、继承性
				CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。
				<style>
					div {
						color: red;
					}
				</style>
				<div>
					<p>asdads</p>
				</div>
				color/font/text/line开头可以继承
				a标签的文字颜色和下划线是不能继承的，
				h标签的文字大小是不能继承的
		3.行高的继承性：
				```css
 					body {
   				font:12px/1.5 Microsoft YaHei；
 				}
				```

			- 行高可以跟单位也可以不跟单位
			- 如果子元素没有设置行高，则会继承父元素的行高为 1.5
			- 此时子元素的行高是：当前子元素的文字大小 * 1.5
			- body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高
优先级
			选择器 							选择器权重
			继承或者*						0，0，0，0，权重最小
			元素选择器						0，0，0，1，
			类选择器，伪类选择器	            0，0，1，0
			ID选择器							0，1，0，0
			行内样式style					1，0，0，0，
			!important重要的			无穷大最高权重
			!important>style行内>ID>类>元素(标签)>*
权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。
如果有间接选中和直接选中，肯定直接选中权重高
- div ul  li   ------>      0,0,0,3
- .nav ul li   ------>      0,0,1,2
- a:hover      -----—>   0,0,1,1
- .nav a       ------>      0,0,1,1
盒子模型
				1、网页布局的本质
					网页布局的核心本质： 就是利用 CSS 摆盒子。
				网页布局过程：

				1. 先准备好相关的网页元素，网页元素基本都是盒子 Box 。
				2. 利用 CSS 设置好盒子样式，然后摆放到相应位置。
				3. 往盒子里面装内容
盒子模型（Box Model）组成
					盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。
					CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：**边框**、**外边距**、**内边距**、和 **实际内容**
边框的(border):
				1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；
				 border : border-width || border-style || border-color; 
				 ①边框样式 border-style 可以设置如下值：
							- none：没有边框即忽略所有边框的宽度（默认值）
							- solid：边框为单实线(最为常用的)
							- dashed：边框为虚线  
							- dotted：边框为点线
				2.边框的合写分写
							 border: 1px solid red; 
				3.也可以设置边框分开写法：
							border-top: 1px solid #ccc;
							border-bottom: 1px solid #ccc;
							border-right: 1px solid #ccc;
							border-left: 1px solid #ccc;
				4.表格的细线边框(border-collapse): 
							1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。
 								border-collapse:collapse; 
								collapse 单词是合并的意思
				border-collapse: collapse; 表示相邻边框合并在一起
内边距（padding）：
				padding 属性用于设置内边距，即边框与内容之间的距离。
				padding: 5px 										1个值，代表上下左右都有5像素内边距
				padding: 5px 10px;							2个值，代表上下内边距是5像素，左右内边距是10像素
				padding: 5px 10px 20px;					3个值，代表上边距5像素，左右内边距10像素，下边距20像素
				padding： 5px 10px 20px 30px;		4个值，表示上右下左
				分开写：
							padding-left: 左内边距
							padding-right: 右内边距	
							padding-top: 上内边距	
							padding-boottom: 下内边距	  
				内边距会影响盒子实际大小：
							1、当我们给盒子指定 padding 值之后，发生了 2 件事情：
								内容和边框有了距离，添加了内边距。
								padding影响了盒子实际大小。
							2、内边距对盒子大小的影响：
								如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。
								如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。
							3、解决方案：
								 如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。
    解决盒子模型撑大问题:box-sizing: border-box;
        1.CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变
        2.box-sizing: content-box 盒子大小为 width + padding + border （以前默认的）
        3.box-sizing: border-box 盒子大小为 width
        4.如果盒子模型我们改为了box-sizing: border-box，那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）
外边距（margin）
				margin 属性用于设置外边距，即控制盒子和盒子之间的距离。
				margin-left: 左外边距
				margin-right:右外边距
				margin-top:上外边距
				margin-bottom:下外边距
				外边距可以让块级盒子水平居中的两个条件：

					~盒子必须指定了宽度（width）。
					~盒子左右的外边距都设置为 auto 。
				常见的写法，以下三种都可以：
					margin-left: auto;   margin-right: auto;
					margin: auto;
					margin: 0 auto;
					~只对水平方向有效果
				注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。
				外边距合并：
						使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。
				主要有两种情况:
						1、相邻块元素垂直外边距的合并
						当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。
						解决方案：尽量只给一个盒子添加 margin 值。
						2、嵌套块元素垂直外边距的塌陷
							​ 对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。
						    两个盒子嵌套关系，设置里面一个盒子的顶部的外边框，外面一个盒子也会被顶下来
						解决方案：
							可以为父元素定义上边框。
							可以为父元素定义上内边距。
							可以为父元素添加 overflow:hidden。
清除内外边距：
					* {
    					padding:0;   /* 清除内边距 */
    					margin:0;    /* 清除外边距 */
  					}
圆角边框:
				border-radius: 10px 10px 10px;
				border-radius: 50%;
				- 参数值可以为数值或百分比的形式
				- 如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%
				- 该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角
				- 分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius
				- 兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用
盒子阴影:
                             水平偏移   垂直便宜 模糊度  阴影扩展  阴影颜色 内外阴影
				 box-shadow: h-shadow v-shadow blur spread color inset;
				 box-shadow: 10px 10px 10px 10px rgba(0, 0, 0, .5);
				 				h-shadow	必须。水平阴影的位置。允许负值。
                 				v-shadow	必须。垂直阴影的位置。允许负值。
                 				blur			可选。模糊距离。
                 				spread		可选。阴影的尺寸。
                 				color			可选。阴影的颜色。
                 				inset			可选。将外部阴影(outset)改为内部阴影
文字阴影：
				text-shadow: h-shadow v-shadow blur color;
				h-shadow	必须。水平阴影的位置。允许负值。
				v-shadow	必须。垂直阴影的位置。允许负值。
				blur			可选。模糊距离。
				spread		可选。阴影的尺寸。
				color			可选。阴影的颜色。
				inset			可选。将外部阴影(outset)改为内部阴影
浮动：
				1、传统网页布局的三种方式
				CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：
						普通流(标准流)
						浮动
						定位
				2.标准流（普通流/文档流）
						所谓的标准流: 就是标签按照规定好默认方式排列
								块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table
								行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等
								以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。
				3、为什么需要浮动？
					总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.
					浮动最典型的应用：可以让多个块级元素一行内排列显示。
					网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。
				4.浮动语法：(float)
					属性值				描述
					none					元素不浮动(默认值)
					left					元素向左浮动
					right					元素向右浮动
				5、浮动特性
					浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)
					浮动的元素会一行内显示并且元素顶部对齐
					浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。
					浮动的元素会具有行内块元素的特性，浮动元素的大小根据内容来决定，浮动的盒子中间是没有缝隙的
				6.浮动布局注意点
					1、浮动和标准流的父盒子搭配。
						先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置
					2、一个元素浮动了，理论上其余的兄弟元素也要浮动。
					一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。
					浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.
清除浮动：
				1、为什么需要清除浮动？
						父级没高度。
						子盒子浮动了。
						影响下面布局了，我们就应该清除浮动了。
				2、清除浮动本质
					清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度
					注意：
							如果父盒子本身有高度，则不需要清除浮动
							清除浮动之后，父级就会根据浮动的子盒子自动检测高度。
							父级有了高度，就不会影响下面的标准流了
				3、清除浮动样式(clear)
						clear: both;
						注意点：添加了这个属性之后,margin会失效
				4.清除浮动多种样式
					第一种：额外标签法： 
							额外标签法会在浮动元素末尾添加一个空的标签。
							例如 <div style="clear:both"></div>，或者其他标签（如<br />等）。
					第二种：父级添加overflow:hidden | auto | scroll;溢出部分无法显示
					第三种：父级添加after伪元素(额外标签法的升级版)。给父级添加：
							 .clearfix:after {  
												   content: ""; 
												   display: block; 
												   height: 0; 
												   clear: both; 
												   visibility: hidden;  
												 } 
							 .clearfix {  /* IE6、7 专有 */ 
												   *zoom: 1;
												}
								代表网站： 百度、淘宝网、网易等
					第四种：父级添加双伪元素
								.clearfix:before,
								.clearfix:after {
													  content:"";
													  display:table; 
													}
								.clearfix:after {
													  clear:both;
													}
								.clearfix {
													   *zoom:1;
													}
								代表网站：小米、腾讯等
PS 基本操作:
					部分操作：
							~文件→打开 ：可以打开我们要测量的图片
							~Ctrl+R：可以打开标尺，或者 视图→标尺
							~右击标尺，把里面的单位改为像素
							~Ctrl+ 加号(+)可以放大视图， Ctrl+ 减号(-)可以缩小视图
							~按住空格键，鼠标可以变成小手，拖动 PS 视图
							~用选区拖动 可以测量大小
							~Ctrl+ D 可以取消选区，或者在旁边空白处点击一下也可以取消选区
PS 切图
					1、图层切图
						最简单的切图方式：右击图层 → 导出 → 切片。
					2、切片切图
					3、导出选中的图片
						文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。
					4、PS插件切图
						Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 "导出 web 所用格式" 以及使用切片工具进行挨个切图的繁琐流程。
						注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。
					5.常见的图片格式
						jpg:产品类的图片经常使用jpg格式
						gif:通常用来显示简单图形及字体，但是可以保存透明背景和动画效果, 实际 经常用于一些图片小动画效果
						png:如果想要切成 背景透明的图片 ,请选择png格式.
						psd:Photoshop的专用格式,ps源文件
 CSS属性书写顺序（重点）
					建议遵循以下顺序：
								1.布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）
								2.自身属性：width / height / margin / padding / border / background
								3.文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word
								4.其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …
页面布局整体思路：
					为了提高网页制作的效率，布局时通常有以下的整体思路，具体如下：
					1.必须确定页面的版心（可视区），我们测量可得知。
					2.分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.
					3.一行中的列模块经常浮动布局, 先确定每个列的大小,之后确定列的位置. 页面布局第二准则
					4.制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要.
					5.所以, 先理清楚布局结构,再写代码尤为重要. 这需要我们多写多积累.
页面制作：
					确定版心——header——log——banner——main——底部footer
定位(position) 介绍:
					1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。
					2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。
 定位组成：
					定位也是用来布局的，它有两部分组成：
										定位 = 定位模式 + 边偏移
边偏移（方位名词）:
					边偏移 就是定位的·盒子移动到最终位置。有 top、bottom、left 和 right 4 个属性。
					定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移
定位模式 (position):
					值				语义
				static		静态定位，默认定位方式，无定位
				relative	相对定位，相对于它自己原来位置（自恋型）
					特点：1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。
								2.原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。
								因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。。。
				absolute	绝对定位，相对于祖先元素来说
						特点：完全脱标 —— 完全不占位置；
						父元素没有定位，则以浏览器为准定位（Document 文档）。
                        注意点：
                            1.以首屏为参考点，不是以整个网页为参考点
				fixed			固定定位 
						特点：完全脱标—— 完全不占位置；
								 只认浏览器的可视窗口 —— 浏览器可视窗口 + 边偏移属性 来设置元素的位置；跟父元素没有任何关系；单独使用的不随滚动条滚动。
				2.固定定位不在占有原先的位置。
				定位口诀：子绝父相
						总结： 因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位
				粘性定位(sticky)：
						粘性定位可以被认为是相对定位和固定定位的混合。 Sticky 粘性的
							语法：
							 选择器 { 
							     position: sticky; 
							     top: 10px; 
							 }
							 粘性定位的特点：
									1.以浏览器的可视窗口为参照点移动元素（固定定位特点）
									2.粘性定位占有原先的位置（相对定位特点）
									3.必须添加 top 、left、right、bottom 其中一个才有效
									跟页面滚动搭配使用。 兼容性较差，IE 不支持。
				堆叠顺序：(z-index: 1;)
								在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序 (z轴)
								可以使用 z-index 来控制盒子的前后次序 (z轴)
								z-index 的特性如下：
										1.属性值：正整数、负整数或 0，默认值是 0，数值越大，盒子越靠上；
										2.如果属性值相同，则按照书写顺序，后来居上；
										3.数字后面不能加单位。
				绝对定位的盒子居中:
								margin: auto 设置水平居中
								可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：
										1.left: 50%;：让盒子的左侧移动到父级元素的水平中心位置；
										2.margin-left: -100px;：让盒子向左移动自身宽度的一半。
				定位特殊特性:
								1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。
								2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。
网页布局总结：
				标准流
						可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。
				 浮动
						可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局
				定位
						定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来
						显示。如果元素自由在某个盒子内移动就用定位布局。
元素的显示与隐藏：
				属性						区别										用途
				display显示			隐藏对象，不保留位置			配合js后面特效
						display: none;隐藏对象			display: block;显示元素
				visibility			隐藏对象，保留位置				使用较少
						visibility：visible;元素可见			visibility:hidden;元素隐藏
				overflow溢出		只隐藏超出大小部分				 可清除浮动，保证里面内容不会超出范围
						overflow: visible;		元素可见
						overflow: hidden;			超出部分隐藏
						overflow: scroll;			总是显示滚动条
						overflow: auto;				自动
精灵图：
			为什么需要精灵图？（目的）
						一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。
			目的:
						为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。
			核心原理：		
						将网页中的一些小背景图像整合到一张大图中 ，这样服务器只需要一次请求就可以了。
			用法：
			background: url(../images/wangzhe.png) no-repeat 0 -219px;
字体图标：
			字体图标的优点：
					轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求
					灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等
					兼容性：几乎支持所有的浏览器，请放心使用
					注意： 字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。
			总结：
					1.如果遇到一些结构和样式比较简单的小图标，就用字体图标。
					2.如果遇到一些结构和样式复杂一点的小图片，就用精灵图。
			字体图标下载：
					1.icomoon 字库 http://icomoon.io 推荐指数 ★★★★★
					2.阿里 iconfont 字库 http://www.iconfont.cn/ 推荐指数 ★★★★★
			字体图标的引入
					下载完毕之后，注意原先的文件不要删，后面会用。
					1.把下载包里面的 fonts 文件夹放入页面根目录下
					2.在 CSS 样式中全局声明字体： 简单理解把这些字体文件通过css引入
					@font-face {
							   font-family: 'icomoon';
							   src:  url('fonts/icomoon.eot?7kkyc2');
							   src:  url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'),
							     url('fonts/icomoon.ttf?7kkyc2') format('truetype'),
							     url('fonts/icomoon.woff?7kkyc2') format('woff'),
							     url('fonts/icomoon.svg?7kkyc2#icomoon') format('svg');
							   font-weight: normal;
							   font-style: normal;
							 }
					3.html 标签内添加小图标。
					4.给标签定义字体。
							 span {
								   font-family: "icomoon";
 								}
css三角：
				 div {
					 		width: 0; 
					    height: 0;
					    border: 50px solid transparent;
						border-color: red green blue black;
						line-height:0;
					    font-size: 0;
					 }
			1.我们用css 边框可以模拟三角效果
			2.宽度高度为0
			3.我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 			transparent 透明就好了
			4.为了照顾兼容性 低版本的浏览器，加上 font-size: 0; line-height: 0;
CSS用户界面样式：cursor
					属性值									描述
					default									小白默认
					pointer									小手
					move									移动
					text									文本
					not-allowed							禁止
轮廓线：outline
			outline: none;
防止拖拽文本域 resize:
			 textarea{ 
 					resize: none;
				 }
vertical-align 属性应用
				vertical-align : baseline | top | middle | bottom 
				baseline基线
				top顶端
				middle中部
				bottom底部
图片、表单和文字对齐
				图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。
解决图片底部默认空白缝隙问题：
				bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。
				主要解决方法有两种：
				1.给图片添加 vertical-align:middle | top| bottom 等。 （提倡使用的）
				2.把图片转换为块级元素 display: block;
溢出的文字省略号显示：
				1.单行文本溢出显示省略号，必须满足三个条件：
					  /*1. 先强制一行内显示文本*/
   					white-space: nowrap;  （ 默认 normal 自动换行）
  					/*2. 超出的部分隐藏*/
  					overflow: hidden;
  					/*3. 文字用省略号替代超出的部分*/
   					text-overflow: ellipsis;
				3.多行文本溢出显示省略号（了解）
						多行文本溢出显示省略号，有较大兼容性问题，适合于webKit浏览器或移动端（移动端大部分是webkit内核）
						/*1. 超出的部分隐藏 */
						overflow: hidden;
						/*2. 文字用省略号替代超出的部分 */
						text-overflow: ellipsis;
						/* 3. 弹性伸缩盒子模型显示 */
						display: -webkit-box;
						/* 4. 限制在一个块元素显示的文本的行数 */
						-webkit-line-clamp: 2;
						/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */
						-webkit-box-orient: vertical;
常见布局技巧:
				margin负值运用:
							1.让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框
							2.鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加z-index）
				文字围绕浮动元素:
							float文字会自动围绕图片
				行内块巧妙运用：
							页码在页面中间显示:
							1.把这些链接盒子转换为行内块， 之后给父级指定 text-align:center;
							2.利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中
				直角三角：
							<style>
    	.box1 {
      			  width: 0;
      			  height: 0;
      			  /* 把上边框宽度调大 */
      			  /* border-top: 100px solid transparent;
      			  border-right: 50px solid skyblue; */
      			  /* 左边和下边的边框宽度设置为0 */
      			  /* border-bottom: 0 solid blue;
      			  border-left: 0 solid green; */

      			  /* 1.只保留右边的边框有颜色 */
      			  border-color: transparent red transparent transparent;
      			  /* 2. 样式都是solid */
      			  border-style: solid;
      			  /* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */
      			  border-width: 100px 50px 0 0 ;
    			}

					</style>
					</head>
					<body>
					    <div class="box1"></div>
					</body>
CSS 初始化:
				不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS 初始化
				简单理解： CSS初始化是指重设浏览器的样式。 (也称为CSS reset）
				每个网页都必须首先进行 CSS初始化。
				这里我们以 京东CSS初始化代码为例。
				Unicode编码字体：
				把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器				解释CSS代码时候出现乱码的问题。
				比如：
				黑体 \9ED1\4F53 宋体 \5B8B\4F53 微软雅黑 \5FAE\8F6F\96C5\9ED1