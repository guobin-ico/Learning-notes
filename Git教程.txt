Git
  1.git是什么？
	分布式版本管理控制工具（没有之一）
	什么是版本控制工具？
	说白了就是帮助我们管理不同版本的文件的一个应用
  2.git诞生
	2002年之前，linus自己手动维护linux的版本代码
	2002年之后到2005年，使用的免费的bitkeeper
	2005年之后，linus开发git
  3.集中型版本控制工具和分布式版本控制工具
	3.1集中的版本控制工具
		1.svn,cvs,vss
	特点：实现大部分开发中队版本管理的需求
		结构简单，上手容易
	缺点：对中央仓库依赖严重，一旦损坏，历史数据无法恢复
		程序员上传的都是完整版，如何追溯历史版本
		系统正在线上运行，需要修改bug或增加几个不同的功能，
		持续几个月的时间，如何同时管理几个版本
		如何管理一个分布全世界各地且不相识的大型开发团队
	3.2分布式版本控制工具
		什么是分布式？
			开发者每个人都会有一个本地仓库
4.git的作用
	1.协同开发
	2.版本记录
	3.解决冲突
	4.历史追查
	5.代码备份
	6.代码的还原
	7.权限管理
	8.代码审查
	9.分支管理
	......
5.git安装
	https://git-scm.com/ 官网进行下载安装
6.配置git签名
	6.1选中要操作的git工程存放的目录，然后单击鼠标右键选择gitbash即可
		git是分布式版本控制工具，所以我们需要填写用户名和邮箱作为标志。
		c:user/用户名/.gitconfig文件，这个文件里面可以看到一个--global属性，所有项目都会共用这个属性。
	git config --global user.name "你的名字"
	git config --global user.email "你的邮箱"
7.创建版本库
	7.1.第一步选中一个的git工程目录
	7.2输入命令初始化版本库    git init,注意把隐藏目录打开
8.git命令行操作
	8.1查看文件状态
		git  status
	8.2将文件/目录添加到暂存区,这里的文件没有真正的提交，只是提交到了暂存区
		git add 文件名/目录名
		git add .  是把所有添加到暂存区
	8.3提交文件,把左右暂存区文件进行提交
		第一种写法
		git commit
		第二种写法
		git commit -m '提交说明' 
		ll：（LL的小写）：查看当前目录当前文件
	进入git 中 vim编辑中，进行说明编辑，
		esc 退出编辑
		:wq 进行保存
	vi ：	进入编辑器
	cat ：	文件名，运行
		git commit 
	注意：每当有文件被修改/添加的时候/删除的时候/都需要重新git add .然后git commit -m ''
	8.4查看日志
		git log
		$ git log --pretty=oneline 简单写法
	8.5回退历史
		8.5.1创建一个文件a.txt
			里面写入文件
		8.5.2修改这个文件，进行暂存提交，之后git log 查看提交日志
			里面的文件进行修改
		8.5.3回退到上一次提交
			git reset --hard HEAD^1
			HEAD:是一个指针，永远指向最新版本，^1表示让HEAD指针向上一个版本
			--hard: 这种回顾不但将版本回顾，还会将指定的数据体验，不会保留任何你修改的记录
			--soft:回退版本，也会保留改动的记录。会自动帮你git add
			--mix:回退版本，并会保留所有改动记录，但是不会自动帮你git add
			git reset: 修改HEAD的位置
			这种方式可以恢复到之前某个提交的版本，但是恢复之后，当前版本之后的的版本将不复存在。
		8.5.4回退到多个版本
			git reset --hard HEAD~2 #回退到2个版本之前的版本
		8.5.5版本穿越
			git reflog #查看历史记录版本号
			$ git reflog #
			cd237df (HEAD -> master) HEAD@{0}: reset: moving to HEAD~2
			713d8ae HEAD@{1}: reset: moving to HEAD^1
			54ce283 HEAD@{2}: commit: 第五次提交
			713d8ae HEAD@{3}: commit: 第四次提交
			56cb6ab HEAD@{4}: commit: 第三次提交 
			cd237df (HEAD -> master) HEAD@{5}: commit: 第二次提交
			11c0a02 HEAD@{6}: commit (initial): 第一次提交
		git reset --hard 54ce283(最后一个是要还原提交的id)
		8.6还原文件
			git checkout 文件名称
			git checkout src/b.txt
			vi src/b.txt编辑这个文件，使用git checkout src/b.txt
		8.7删除文件
			删除暂存区文件
			1.先删除文件
			2.git add .
			3.git commit -m '提交说明';
	9.工作区、暂存区、本地库
		9.1概念：
			工作区：电脑本地磁盘目录
			本地库：工作区中有一个因此目录.git，它就是git的本地版本库
			暂存区：一般存储在git目录下的index文件，所以我们把暂存区有时候叫做索引
	10.分支
	 	10.1
			项目已经上线了，但是产品经理又提出了新的需求，评估两个版本，但是项目还是需要同时上线运营，
			时不时的修改bug,如何管理这几个版本，这时候就需要分支
		10.2查看分支
			git branch	 -v  查看分支
			$ git branch -v
			* master e1f91a9 第四次提交
			分支master 版本id 最后更新提交的操作
		10.3创建分支
			git branch 分支名称
			$ git branch -v
 			 common e1f91a9 第四次提交
			* master e1f91a9 第四次提交
		10.4切换分支
			git checkout 分支名
		10.5合并分支（将其他分支合并到主分支：maser）
			1.切换到主分支
			git checkout master
			2.合并
			git merge 分支名字
			git merge common
	11.冲突
		11.1什么是冲突
			冲突一般是指同一位置的代码，两种版本的仓库合并时，
			版本的管理软件无法判断到底应该保留哪一个版本，因此会提示该文件发生冲突，
			冲突一般需要程序员手动解决。
		11.2在分支合并的时候解决冲突
			先在master分支上创建luosenhan.txt文件
			再在common分支上创建一个luosenhan.txt文件上
			分别提交
			最后合并	
			下面是冲突的案例：
			$ git merge common
			Auto-merging src/haha.txt
			CONFLICT (add/add): Merge conflict in src/haha.txt
			Automatic merge failed; fix conflicts and then commit the result.
		5.查看冲突：
			git diff
		6.解决冲突：
			切换哪个目录，然后查看文件
		7.在重新add和commit 即可			
Github:
	1.什么是github
		github是一个git项目托管网站，主要提供git的版本托管服务。
		网站：https://github.com/
		注册账号的注意事项：
			不要使用163邮箱，有可能接收不到效验邮件
			较长不使用github，有可能会被冻结账号
			如果冻结账号，请登录https://github.com/contanc恢复申请
	2.Gitub操作
		2.1建立本地仓库
			1.创建guojing和huangrong子目录
			2.搭建代码库
				git init 		初始化仓库
				git config user.name 'guobin'
				git config user.email 'guonianbin@sian.cn'
				之后创建文件
			3.提交代码
				git add .
				git commit -m '提交说明'
		2.2注册github账号
			创建github项目
		2.4推送代码到GitHub
			1.增加远程地址：git remote add 远端代号
				<远端代码>：指远程链接的代号，一直直接用origin做代号，也可以自定义
				<远端代码>：远程链接url
				git remote add origin https://github.com/guobin-ico/gongfu-tea.git
			2.推送到远程库：
				git push <远端代号><分支名称>
				git push origin master

		2.5下载GitHub上的库
			从GitHub上克隆
				git clone 远端地址 项目名称目录
				项目的目录：指为克隆的项目在本地新建的一个目录名，可以不填，默认就是使用GitHub仓库名
				git clone https://github.com/guobin-ico/gongfu-tea.git kongfu
		2.6邀请好友进行同时开发，同步更新代码
			git pull 远程代码 远程分支
			git pull origin master
	3.合作冲突：
		3.1什么是合作冲突：
			在上传若同步代码时，由于你和他人修改了同一位置的代码，版本管理工具无法判断究竟以谁为准，就会报告冲突，需要程序员手动解决
		3.2解决方式
			1.修改合并
			2.git add 
			3.git commit -m ''	
			4.git push origin master
	4.第三方协作（合作）
		链接发给第三方，第三方登录使用所谓的fork出对应的库