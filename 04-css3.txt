CSS3新特性:
        新增的CSS3特性有兼容性问题，ie9+才支持
        移动端支持优于 PC 端
        应用相对广泛
  属性选择器：
          选择符                    简介
        E[att]              选择具有att属性的E元素
        E[att="val"]        选择具有att属性且属性值等于val的E元素
        E[att^="val"]       匹配具有att属性且值以val开头的E元素
        E[att$="val"]       匹配具有att属性且值以val结尾的E元素
        E[att*="val"]       匹配具有att属性且值中含有val的E元素
        注意：类选择器、属性选择器、伪类选择器，权重为 10。
  结构伪类选择器：
        结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素
          选择符                    简介
        E:first-child       匹配父元素中的第一个子元素,但不是同级别
        E:last-child        匹配父元素中最后一个E元素，但不是同级别
        E:nth-child(n)      匹配父元素中的第n个子元素E
        E:first-of-type     指定类型同级别的第一个
        E:last-of-type      指定类型同级别最后一个
        E:nth-of-type(n)    指定类型同级别的第n个
        E:nth-last-of-type(n)    指定类型同级别的最后一个
        E:nth-first-of-type(n)   指定类型同级别的正数第一个
        E:only-child             指定唯一一个，不是唯一的话，是不会满足条件
        E:only-of-type           指定唯一同级类型
        E:nth-child(n)：
            1.匹配到父元素的第2个子元素，ul li:nth-child(2){}
            2.匹配到父元素的序号为奇数的子元素，ul li:nth-child(odd){} odd 是关键字 奇数的意思（3个字母 ）
            3.匹配到父元素的序号为偶数的子元素，ul li:nth-child(even){} even（4个字母 ）
            4.匹配到父元素的前3个子元素，ul li:nth-child(-n+3){}，
              n是从 0 ，1，2，3.. 一直递增
                  所以 -n+3 就变成了
                      n=0 时 -0+3=3
                      n=1时 -1+3=2
                      n=2时 -2+3=1
                      n=3时 -3+3=0
            5.一些常用的公式： 公式不是死的，
                公式          取值
                2n            偶数
                2n+1          奇数
                5n            5,10,15...
                n+5           从第5个开始(包含第5个)到最后
                -n+5          前5个(包含第5个).....
            6.E:nth-child 与 E:nth-of-type 的区别  
                1.E:nth-child(n) 匹配父元素的第n个子元素E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配
                2.E:nth-of-type(n) 匹配同类型中的第n个同级兄弟元素E，也就是说，对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子
  伪元素选择器:
         伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构
         ::befor          在元素内部的前面插入内容
         ::after          在元素内部的后面插入内容
         注意：
            1.before 和 after 创建一个元素，但是属于行内元素
            2.新创建的这个元素在文档树中是找不到的，所以我们称为伪元素
            3.语法： element::before {}
            4.before 和 after 必须有 content 属性
            before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素
            5.伪元素选择器和标签选择器一样，权重为 1
    盒子模型:
        1.CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变
        2.box-sizing: content-box 盒子大小为 width + padding + border （以前默认的）
        3.box-sizing: border-box 盒子大小为 width
        4.如果盒子模型我们改为了box-sizing: border-box，那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）
    图标变模糊CSS3滤镜filter:
        语法：filter:   函数(); -->  例如： filter: blur(5px);  -->  blur模糊处理  数值越大越模糊
    计算盒子宽度calc 函数
        语法：width: calc(100% - 80px);
        括号里面可以使用 + - * / 来进行计算
    CSS3 过渡
        过渡动画： 是从一个状态 渐渐的过渡到另外一个状态
        transition: 要过渡的属性  花费时间  运动曲线  何时开始;
        transition: all 2s linner 1s;
        1.属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都变化过渡， 写一个all 就可以
        2.花费时间： 单位是 秒（必须写单位） 比如 0.5s
        3.运动曲线： 默认是 ease （可以省略）
        4.何时开始：单位是 秒（必须写单位）可以设置延迟触发时间 默认是 0s （可以省略）
        5.后面两个属性可以省略
        6.记住过渡的使用口诀： 谁做过渡给谁加
        7.运动曲线：
              linner(匀速)
              ease(逐渐慢下来)  
              ease-in(加速)
              ease-out(减速)
              ease-in-out(先加速后减速)
2D 转换:transform
        转换（transform）是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果
        转换（transform）你可以简单理解为变形
            移动：translate
            旋转：rotate
            缩放：scal
        (一)、2D转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系
            1.2D 转换之移动 translat
                2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。
                语法:
                    transform: translate(x,y); 或者分开写
                    transform: translateX(n);
                    transform: translateY(n);
                    默认情况下围绕z轴进行旋转
            2. 重点
                定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素
                translate最大的优点：不会影响到其他元素的位置
                translate中的百分比单位是相对于自身元素的 translate:(50%,50%);
                translate对行内标签没有效果
        （二）、2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转
            1. 语法：
                    transform:rotate(度数)
            2. 重点：
                    rotate里面跟度数， 单位是 deg 比如 rotate(45deg)
                    角度为正时，顺时针，负时，为逆时针
                    默认旋转的中心点是元素的中心点
        （三）、设置旋转中心点 
               transform-origin: x y;
               transform-origin: x y;
               也可以跟方位名词
        （四）、2D 转换之缩放scale，不会影响其他盒子，可以设置缩放中心点
                1. 语法：
                    transform:scale(x,y);
                2. 重点：
                    transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大
                    transform:scale(2,2) ：宽和高都放大了2倍
                    transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)
                    transform:scale(0.5,0.5)：缩小
                    小于1就是缩小
        (五)、transform合写：顺序必须这么写
              transform: translate() rotate() scale();
动画:
    动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。
    动画序列:
        1.动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。
        2.在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。
        3.请用百分比来规定变化发生的时间，或用关键词 "from" 和 "to"，等同于 0% 和 100%。
        4.0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。
    动画的基本使用:
         1.用keyframes 定义动画（类似定义类选择器）
                @keyframes 动画名称 {
                    0%{
                        width:100px;
                    }  
                    100%{
                        width:200px;
                    }
                }
        2. 元素使用动画
                div {
                   width: 200px;
                   height: 200px;
                   background-color: aqua;
                   margin: 100px auto;
                   /* 调用动画 */
                   animation-name: 动画名称;
                   /* 持续时间 */
                   animation-duration: 持续时间;
                }
        3.动画简写属性
                animation：动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向  动画等待或者结束的状态;
                    animation: myfirst 5s linear 2s infinite alternate;
                盒子动画结束后，停在结束位置：  animation-fill-mode  ：   forwards
                想要动画走回来 ，而不是直接跳回来：animation-direction   ：  alternate 
                暂停动画：animation-play-state:   puased;   窗体给弄乱了，怎么办
        4.动画常用属性：
                属性	                        描述
            @keyframes	                    规定动画。
            animation	                    所有动画属性的简写属性，除了animation-play-state属性。
            animation-name	                规定@keyframes动画的名称。
            animation-duration	            规定动画完成一个周期所花费的秒或毫秒，默认是0。运动曲线
            animation-timing-function	    规定动画的速度曲线，默认是“ease”。
            animation-delay	                规定动画何时开始，默认是0。
            animation-iteration-count	    规定动画被播放的次数，默认是1，还有infinite(无限循环)
            animation-direction	            规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放
            animation-play-state	        规定动画是否正在运行或暂停。默认是"running",还有"paused"。
            animation-fill-mode	            规定动画结束后状态，保持forwards，回到起始backwards(默认)
3D 转换：
        我们生活的环境是3D的，照片就是3D物体在2D平面呈现的例子。
        特点:
            近大远小。
            物体后面遮挡不可见
            在现实生活当中，当我们通过肉眼去看物体的时候和照片的成像是相同的。
            如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。
        三维坐标系:
            三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的。 
            x轴：水平向右      注意： x 右边是正值，左边是负值 
            y轴：垂直向下      注意： y 下面是正值，上面是负值
            z轴：垂直屏幕      注意： 往外面是正值，往里面是负值 
        1.3D移动 translate3d
            3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。 
                transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离
                translform:translateX(100px)：仅仅是在x轴上移动
                translform:translateY(100px)：仅仅是在Y轴上移动
                translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ只能跟px单位）  
                因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动
        2.透视 perspective 
                透视写在被观察元素的父盒子身上
                在2D平面产生近大远小视觉立体，但是只是效果二维的  
                模拟人类的视觉位置，可认为安排一只眼睛去看  
                距离电脑平面的距离为视距  
                距离视觉点越近的在电脑平面成像越大，越远成像越远
                如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。
                模拟人类的视觉位置，可认为安排一只眼睛去看
                透视我们也称之为视距，视距就是人的眼睛到屏幕的距离
                距离视觉点越近的电脑平面成像越大，越远城=成像越小
                透视单位是像素
        3.translateZ 
                translform:translateZ(100px)：仅仅是在Z轴上移动。
                有了透视，就能看到translateZ 引起的变化了  
                translateZ：单位只能是px
                translateZ：往外是正值
                translateZ：往里是负值  
        4.3D旋转 rotate3d 
                3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转，对于元素旋转的方向的判断 我们需要先学习一个左手准则。
                左手准则:
                    左手的手拇指指向 x轴的正方向
                    其余手指的弯曲方向就是该元素沿着x轴旋转的方向
                语法:
                    transform:rotateX(45deg)：沿着x轴正方向旋转 45度
                    transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg
                    transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg
                    transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）
                    transform:rotate3d(1,1,0,45deg)： 沿着自定义轴旋转 deg为角度（了解即可）
        5.3D呈现 transfrom-style 
                控制子元素是否开启三维立体环境。
                给父亲添加影响的是子盒子。
                Transform-style: preserve-3d; 子元素开启立体空间，默认的值是 flat 不开启
                代码写给父级，但是影响的是子盒子
浏览器私有前缀:
            浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。
            1. 私有前缀
                -moz-：代表 firefox 浏览器私有属性
                -ms-：代表 ie 浏览器私有属性
                -webkit-：代表 safari、chrome 私有属性
                -o-：代表 Opera 私有属性
            2. 提倡的写法
                -moz-border-radius: 10px; 
                -webkit-border-radius: 10px; 
                -o-border-radius: 10px; 
                border-radius: 10px;
背景线性渐变:
            语法1：
                background: linear-gradient(起始方向, 颜色1, 颜色2, ...);
                background: -webkit-linear-gradient(left, red , blue);
                background: -webkit-linear-gradient(left top, red , blue);
            背景渐变必须添加浏览器私有前缀
            起始方向可以是： 方位名词 或者 度数 ， 如果省略默认就是 top
指定背景图像的大小：
        background-size: length|percentage|cover|contain;
        值	描述
        length	设置背景图片高度和宽度。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为 auto(自动)
        percentage	将计算相对于背景定位区域的百分比。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为"auto(自动)"
        cover	此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。
        contain	此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。
多重背景：
        background:url(...),url(...);
        background-repeat: no-repeat, no-repeat;
        .......

特殊样式：
            /*CSS3盒子模型*/
            box-sizing: border-box;
            -webkit-box-sizing: border-box;
            /*点击高亮我们需要清除清除 设置为transparent 完成透明*/
            -webkit-tap-highlight-color: transparent;
            /*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/
            -webkit-appearance: none;
            /*禁用长按页面时的弹出菜单*/
            img,a { -webkit-touch-callout: none; }
        
