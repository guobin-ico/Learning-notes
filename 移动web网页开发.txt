移动WEB开发：
      移动端基础：
            1.1 浏览器现状
                PC端常见浏览器：
                  360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。
                移动端常见浏览器：
                  UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。
                国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。
                总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。
            1.2 手机屏幕现状：
                移动端设备屏幕尺寸非常多，碎片化严重。
                Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。
                近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。
                作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是px 。
            1.3 常见移动端屏幕尺寸：
                   设备              尺寸(英寸)      开发尺寸          物理像素比
               iphone3G                 3.5              320*480          1.0 
               iphone4/4s               3.5              320*480          2.0
               iphone5/5s/5c            4.0              320*568          2.0
               HTC one  M8              4.5              360*640          3.0
               iphone6                  4.7              375*667          2.0
               Nexus4                   4.7              384*640          2.0
               Nexus5x                  5.2              411*731          2.6
               iphone6 Plus             5.5              414*736          3.0
               Samsung Galaxy Note 4    5.7              480*853          3.0
               Song Xperia Z Ultra      6.4              540*960          2.0
               Nexus 7                  7.0              600*960          1.3
               iPad Mini                7.9              768*1024         1.0
              注：以上数据均参考自:https://material.io/devices/ 。
              注：作为前端开发，不建议大家去纠结dp，dpi，pt，ppi等单位。
            1.4 移动端调试方法
              Chrome DevTools（谷歌浏览器）的模拟手机调试
              搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器
              使用外网服务器，直接IP或域名访问
            1.4 总结
                移动端浏览器我们主要对webkit内核进行兼容
                我们现在开发的移动端主要针对手机端开发
                现在移动端碎片化比较严重，分辨率和屏幕尺寸大小不一
                学会用谷歌浏览器模拟手机界面以及调试
      2. 视口:
            视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口
              2.1 布局视口 layout viewport
                  一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。
                  iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。
              2.2 视觉视口 visual viewport
                  字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。就是我们屏幕有多大就显示多大区域
                  我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。
              2.3 理想视口 ideal viewport
                  为了使网站在移动端有最理想的浏览和阅读宽度而设定
                  理想视口，对设备来讲，是最理想的视口尺寸
                  需要手动添写meta视口标签通知浏览器操作
                  meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽
              2.4 总结:
                  视口就是浏览器显示页面内容的屏幕区域
                  视口分为布局视口、视觉视口和理想视口
                  我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽
                  想要理想视口，我们需要给我们的移动端页面添加 meta视口标签
              2.5 meta视口标签:
                  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
                    属性                        解释说明
                  width                   宽度设置的是viewport宽度，可以设置device-width(设备的宽度)特殊值
                  initial-scale           初始缩放比，大于0的数字
                  maximum-scale           最大缩放比，大于0的数字
                  minimum-scale           最小缩放比，大于0的数字
                  user-scalable           用户是否可以缩放，yes或no（1或0）  
              2.6 标准的viewport设置
                  视口宽度和设备保持一致
                  视口的默认缩放比例1.0
                  不允许用户自行缩放
                  最大允许的缩放比例1.0
                  最小允许的缩放比例1.0
      3. 二倍图：
              3.1 物理像素&物理像素比
                  1.物理像素(就是屏幕分辨率)点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334
                  2.我们开发时候的1px 不是一定等于1个物理像素的
                  3.PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同
                  4.一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比
                  5.PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的
                  6.Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度
              3.2 多倍图
                  对于一张 50px * 50px 的图片,在手机 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊
                   在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题
                   通常使用二倍图， 因为iPhone 6\7\8 的影响,但是现在还存在3倍图4倍图的情况，这个看实际开发公司需求
                   背景图片 注意缩放问题
                        /* 在 iphone8 下面 */
                        img{
                        /*原始图片100*100px*/
                        width: 50px;
                        height: 50px;
                        } 
                        .box{
                        /*原始图片100*100px*/
                        background-size: 50px 50px;
                        }
              3.3 背景缩放 background-size
                  background-size 属性规定背景图像的尺寸
                  background-size: 背景图片宽度 背景图片高度;
                  单位： 长度|百分比|cover|contain;
                   cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。
                   contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域
            3.4 多倍图切图 cutterman
                    @3X 3倍图
                    @2X 2倍图
                    @1X 1倍图原图
            4. 移动端开发选择
                    4.1 移动端主流方案
                        1. 单独制作移动端页面（主流）
                            京东商城手机版
                            淘宝触屏版
                            苏宁易购手机版
                        2. 响应式页面兼容移动端（其次）
                            三星手机官网
                    4.2 单独移动端页面（主流）
                        通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。
                            1.m.taobao.com         2.m.jd.com       3.m.suning.com
                    4.3 响应式兼容PC移动端
                        三星电子官网： www.samsung.com/cn/ ，通过判断屏幕宽度来改变样式，以适应不同终端。
                        缺点：制作麻烦， 需要花很大精力去调兼容性问题
                    4.4 总结
                        现在市场常见的移动端开发有 单独制作移动端页面 和 响应式页面 两种方案
                        现在市场主流的选择还是单独制作移动端页面
            5. 移动端技术解决方案:
                    5.1 移动端浏览器
                        移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。
                        我们可以放心使用 H5 标签和 CSS3 样式。
                        同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可
                    5.2 CSS初始化 normalize.css
                        移动端 CSS 初始化推荐使用 normalize.css/
                        Normalize.css：保护了有价值的默认值
                        Normalize.css：修复了浏览器的bug
                        Normalize.css：是模块化的
                        Normalize.css：拥有详细的文档
                        官网地址： http://necolas.github.io/normalize.css/
                    5.3 CSS3 盒子模型 box-sizing
                        传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding 
                        CSS3盒子模型： 盒子的宽度 = CSS中设置的宽度width 里面包含了 border 和 padding
                        也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了
                            /*CSS3盒子模型*/
                            box-sizing: border-box;
                            /*传统盒子模型*/
                            box-sizing: content-box;
                        传统or CSS3盒子模型？
                        移动端可以全部CSS3 盒子模型
                        PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型
            5.4 特殊样式
                    /*CSS3盒子模型*/
                    box-sizing: border-box;
                    -webkit-box-sizing: border-box;
                    /*点击高亮我们需要清除清除 设置为transparent 完成透明*/
                    -webkit-tap-highlight-color: transparent;
                    /*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/
                    -webkit-appearance: none;
                    /*禁用长按页面时的弹出菜单*/
                    img,a { -webkit-touch-callout: none; }
            6.移动端常见布局
                    移动端技术选型
                        移动端布局和以前我们学习的PC端有所区别：
                        1. 单独制作移动端页面（主流）
                        流式布局（百分比布局）
                         flex 弹性布局（强烈推荐）
                         less+rem+媒体查询布局
                         混合布局
                        2. 响应式页面兼容移动端（其次）
                         媒体查询
                         bootstarp
                6.1 流式布局（百分比布局）
                        流式布局，就是百分比布局，也称非固定像素布局。
                        通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。
                        流式布局方式是移动web开发使用的比较常见的布局方式。
                        max-width 最大宽度 （max-height 最大高度）
                        min-width 最小宽度 （min-height 最小高度）
                常用初始化样式:
                        body {
                            margin: 0 auto;
                            min-width: 320px;
                            max-width: 640px;
                            background: #fff;
                            font-size: 14px;
                            font-family: -apple-system, Helvetica, sans-serif;
                            line-height: 1.5;
                            color: #666;
                        }
                二倍精灵图做法
                         在firework里面把精灵图等比例缩放为原来的一半
                         之后根据大小 测量坐标
                         注意代码里面background-size也要写： 精灵图原来宽度的一半
                图片格式:
                        DPG图片压缩技术:
                                    京东自主研发推出DPG图片压缩技术，经测
                                    试该技术，可直接节省用户近50%的浏览流量，
                                    极大的提升了用户的网页打开速度。
                                    能够兼容jpeg，实现全平台、全部浏览器的
                                    兼容支持，经过内部和外部上万张图片的人
                                    眼浏览测试后发现，压缩后的图片和webp的
                                    清晰度对比没有差距。
                        webp 图片格式:
                                    谷歌开发的一种旨在加快图片加载速度的图片格式。
                                    图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器宽带资源和数据空间、
                6.1 flex布局：
                        1.传统布局与flex布局
                            传统布局:
                                兼容性好
                                布局繁琐
                                局限性，不能再移动端很好的布局
                            flex 弹性布局:
                                操作方便，布局极为简单，移动端应用很广泛
                                PC 端浏览器支持情况较差
                                IE 11或更低版本，不支持或仅部分支持
                        建议：
                            1. 如果是PC端页面布局，我们还是传统布局。
                            2. 如果是移动端或者不考虑兼容性问题的PC端页面布局，我们还是使用flex弹性布局
                        2 初体验:
                            搭建HTML结构
                                <div>
                                    <span>1</span>
                                    <span>2</span>
                                    <span>3</span>
                                </div>
                                里面的3个span是行内元素
                            CSS样式
                            ① span 直接给宽度和高度，背景颜色，还有蓝色边框
                            ② 给 div 只需要添加 “display：flex” 即可
                        3 布局原理
                            flex 是 flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。
                            --当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。
                            --伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布局
                            --采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。
                            --体验中 div 就是 flex父容器。
                            --体验中 span 就是 子容器 flex项目
                            --子容器可以横向排列也可以纵向排列
                            总结flex布局原理：
                                就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式
                        4. 常见父项属性:
                            以下由6个属性是对父元素设置的
                            (1).flex-direction：设置主轴的方向:
                                flex-direction 属性决定主轴的方向（即项目的排列方向）
                                注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的
                                        属性值                  说明
                                        row                 默认值从左到右
                                        row-reverse         从右到左
                                        column              从上到下
                                        column-reverse      从下到上
                            (2).justify-content：设置主轴上的子元素排列方式:
                                justify-content 属性定义了项目在主轴上的对齐方式
                                注意： 使用这个属性之前一定要确定好主轴是哪个
                                    属性值                      说明
                                    flex-start          默认值 从头部开始 如果主轴是x轴，则从左到右
                                    flex-end            从尾部开始排列
                                    center              在主轴居中对齐（如果主轴是x轴则 水平居中）
                                    space-around        平分剩余空间
                                    space-between       先两边贴边 再平分剩余空间（重要）
                                    stretch             设置子项元素高度平分父元素高度
                            (3).flex-wrap：设置子元素是否换行:
                                默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。
                                    属性值              说明
                                    nowrap          默认值，不换行
                                    wrap            换行
                            (4).align-content:设置侧轴上的子元素的排列方式（多行）
                                设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。
                                    属性值                          说明
                                flex-start              默认值在侧轴的头部开始排列
                                flex-end                在侧轴的尾部开始排列
                                center                  在侧轴中间显示
                                space-around            子项在侧轴平分剩余空间
                                space-between           子项在侧轴先分布在两头，再平分剩余空间
                                stretch                 设置子项元素高度平分父元素高度

                            (5).align-items：设置侧轴上的子元素排列方式（单行）
                                该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（单行）的时候使用
                                    属性值              说明
                                    flex-start      默认值 从上到下
                                    flex-end        从下到上
                                    center          挤在一起居中（垂直居中）
                                    stretch         拉伸(不能带高度)
                            (6).flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap
                                flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性
                                flex-flow:row wrap;
                      
                            (7).align-content 和 align-items 区别
                                align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸
                                align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分配剩余空间等属性值。
                                总结就是单行找 align-items 多行找 align-content
                            (8). flex-flow
                                flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性
                                flex-flow:row wrap;
                      子项：
                            (9).flex 属性
                                flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。
                                .item {
                                    flex: <number>; /* default 0 */
                                }
                            (10).align-self 控制子项自己在侧轴上的排列方式
                                align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。
                                默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。
                                span:nth-child(2) {
                                        /* 设置自己在侧轴上的排列方式 */
                                        align-self: flex-end;
                                    }
                            (11).order 属性定义项目的排列顺序
                                数值越小，排列越靠前，默认为0。
                                注意：和 z-index 不一样。
                                .item {
                                    order: <number>;
                                }
                    4.1常用初始化样式(1)：
                            body {
                                max-width: 540px;
                                min-width: 320px;
                                margin: 0 auto;
                                font: normal 14px/1.5 Tahoma,"Lucida Grande",Verdana,"Microsoft
                                Yahei",STXihei,hei;
                                color: #000;
                                background: #f2f2f2;
                                overflow-x: hidden; //hidden在移动端开发中可以让页面纵向滚动。
                                -webkit-tap-highlight-color: transparent; //点击高亮颜色透明
                            }
                        常用初始化样式(2)：
                                body {
                                    margin: 0 auto;
                                    min-width: 320px;
                                    max-width: 640px;
                                    background: #fff;
                                    font-size: 14px;
                                    font-family: -apple-system, Helvetica, sans-serif;
                                    line-height: 1.5;
                                    color: #666;
                                }
            移动WEB开发之rem适配布局：
                        方案：
                            1.页面布局文字能否随着屏幕大小变化而变化
                            2.流式布局和flex布局主要针对于宽度布局，那高度如何设置？
                            3.怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？
                        rem基础:
                            rem 单位：
                                rem (root em)是一个相对单位，类似于em，em是父元素字体大小。
                                不同的是rem的基准是相对于html元素的字体大小。
                                比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。
                                /* 根html 为 12px */
                                html {
                                font-size: 12px;
                                }
                                /* 此时 div 的字体大小就是 24px */
                                div {
                                font-size: 2rem;
                                }
                                rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元
                                素大小。
                                /* 根html 为 12px */
                                html {
                                    font-size: 12px;
                                }
                                /* 此时 div 的字体大小就是 24px */
                                div {
                                    font-size: 2rem;
                                }
                        媒体查询:
                                什么是媒体查询:
                                    媒体查询（Media Query）是CSS3新语法。
                                    使用 @media 查询，可以针对不同的媒体类型定义不同的样式
                                    @media 可以针对不同的屏幕尺寸设置不同的样式
                                    当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面
                                    目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询
                             语法规范:
                                    @media mediatype and|not|only (media feature) {
                                                SS-Code;
                                        }  
                                    用 @media 开头 注意@符号
                                     mediatype  mediatype 查询类型:
                                            值              解释说明
                                            all         用于所有设备
                                            print       用于打印机和打印预览
                                            screen       用于电脑屏幕，平板电脑，智能手机等
                                     关键字 and not only:
                                            and：可以将多个媒体特性连接到一起，相当于“且”的意思。
                                            not：排除某个媒体类型，相当于“非”的意思，可以省略。
                                            only：指定某个特定的媒体类型，可以省略。
                                     media feature 媒体特性 必须有小括号包含
                                            值                  解释说明
                                            width           定义输出设备中页面可见区域的宽度
                                            min-width       定义输出设备中页面最小可见区域宽度
                                            max-width       定义输出设备中页面最大可见区域宽度
                        实现思路:
                                ① 按照从大到小的或者从小到大的思路
                                ② 注意我们有最大值 max-width 和最小值 min-width都是包含等于的
                                ③ 当屏幕小于540像素， 背景颜色变为蓝色 （x <= 539）
                                ④ 当屏幕大于等于540像素 并且小于等于 969像素的时候 背景颜色为 绿色 ( 540=<x <= 969）
                                ⑤ 当屏幕大于等于 970像素的时候，背景颜色为红色 （ x >= 970）
                            注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁
                        媒体查询+rem实现元素动态大小变化:
                                rem单位是跟着html来走的，有了rem页面元素可以设置不同大小尺寸
                                媒体查询可以根据不同设备宽度来修改样式
                                媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化
                        2.4 引入资源（理解）:
                                当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。
                                原理，就是直接在link中判断设备的尺寸，然后引用不同的css文件。
                            1. 语法规范:
                                <link rel="stylesheet" media="mediatype and|not|only (media feature)" href="mystylesheet.css">
                            2.示例:
                                <link rel="stylesheet" href="styleA.css" media="screen and (min-width: 400px)">
 Less 介绍:
            Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也成为CSS预处理器。
            做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为CSS加入程序式语言的
            特性。
            它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且
            降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。
            Less中文网址： http://lesscss.cn/
            常见的CSS预处理器：Sass、Less、Stylus
            一句话：Less 是一门 CSS 预处理语言，它扩展了CSS的动态特性
Less 安装:
            ① 安装nodejs，可选择版本(8.0)，网址：http://nodejs.cn/download/
            ② 检查是否安装成功，使用cmd命令（win10 是 window +r 打开 运行输入cmd） --- 输入“ node –v ”查看版本即可
            ③ 基于nodejs在线安装Less，使用cmd命令“ npm install -g less ”即可
            ④ 检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可
Less 使用
            我们首先新建一个后缀名为less的文件， 在这个less文件里面书写less语句。
             Less 变量:变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。
                @变量名:值;
                变量命名规范:必须有@为前缀,不能包含特殊字符,不能以数字开头,大小写敏感
                例：@color: pink;
                变量使用规范：
                    //直接使用
                    body{
                    color:@color;
                    }
                    a:hover{
                    color:@color;
                    }
             Less 编译：
                本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则
                最终会通过解析器，编译生成对应的 CSS 文件。
                所以，我们需要把我们的 less文件，编译生成为css文件，这样我们的html页面才能使用。
                vocode Less 插件
                Easy LESS 插件用来把less文件编译为css文件，安装完毕插件，重新加载下 vscode。只要保存一下Less文件，会自动生成CSS文件。
             Less 嵌套：
                #header {
                    .logo {
                        width: 300px;
                    }
                }
                如果遇见 （交集|伪类|伪元素选择器）
                内层选择器的前面没有 & 符号，则它被解析为父选择器的后代；
                 如果有 & 符号，它就被解析为父元素自身或父元素的伪类。
                例：a{
                    &:hover{
                    color:red;
                    }
                    }

             Less 运算
                    任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。
                    /*Less 里面写*/
                    @witdh: 10px + 5;
                    div {
                    border: @witdh solid red;
                    }
                    /*生成的css*/
                    div {
                    border: 15px solid red;
                    }
                    /*Less 甚至还可以这样 */
                    width: (@width + 5) * 2;
rem 适配方案
            1. 让一些不能等比自适应的元素，达到当设备尺寸发生改变
                的时候，等比例适配当前设备。
            2. 使用媒体查询根据不同设备按比例设置html的字体大小，
                然后页面元素使用rem做尺寸单位，当html字体大小变化
                元素尺寸也会发生变化，从而达到等比缩放的适配。
     rem 适配方案技术使用（市场主流）：
           rem 实际开发适配方案1：
                    less + 媒体查询 + rem
                设计稿常见尺寸宽度：
                    设备                常见宽度
                    iphone 4.5          640px
                    phone 678           750px
                    android             常见320px、360px、375px、384px、400px、414px、500px、720px
                动态设置 html 标签 font-size 大小:
                    ① 假设设计稿是750px
                    ② 假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）
                    ③ 每一份作为html字体大小，这里就是50px
                    ④ 那么在320px设备的时候，字体大小为320/15 就是 21.33px
                    ⑤ 用我们页面元素的大小 除以不同的 html 字体大小会发现他们比例还是相同的
                    ⑥ 比如我们以 750为标准设计稿
                    ⑦ 一个100*100像素的页面元素 在 750屏幕下， 就是 100 / 50 转换为rem 是 2rem * 2 rem 比例是 1比1
                    ⑧ 320屏幕下， html 字体大小为 21.33 则 2rem = 42.66px 此时宽和高都是 42.66 但是 宽和高的比例还是 1比1
                    ⑨ 但是已经能实现不同屏幕下 页面元素盒子等比例缩放的效果
                元素大小取值方法
                    ① 最后的公式： 页面元素的rem值 = 页面元素值（px） / （屏幕宽度 / 划分的份数）
                    ② 屏幕宽度/划分的份数 就是 html font-size 的大小
                    ③ 或者： 页面元素的rem值 = 页面元素值（px） / html font-size 字体大小
        设置公共common.less文件:
                    1. 新建common.less 设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要
                    2. 我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px
                    3. 划分的份数我们定为 15等份
                    4. 因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面
            body样式：
                    body {
                            min-width: 320px;
                            width:15rem;
                            margin: 0 auto;
                            line-height: 1.5;
                            font-family: Arial,Helvetica;
                            background: #F2F2F2;
                        }
大部分4.7~5寸的安卓设备为720px
            技术方案2（推荐）：
                    flexible.js + rem
                简洁高效的rem适配方案flexible.js：
                    手机淘宝团队出的简洁高效 移动端适配库
                    我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理
                    它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。
                    我们要做的，就是确定好我们当前设备的html 文字大小就可以了
                    比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以
                    里面页面元素rem值： 页面元素的px 值 / 75 
                    剩余的，让flexible.js来去算
                    
                    github地址：https://github.com/amfe/lib-flexible
            body样式：
                    body {
                        min-width: 320px;
                        width:15rem;
                        margin: 0 auto;
                        line-height: 1.5;
                        font-family: Arial,Helvetica;
                        background: #F2F2F2;
                    }
             VSCode px 转换rem 插件 cssrem:设置html字体大小基准值
                        1. 打开 设置 快捷键是 ctrl + 逗号,cssroot设置75px
移动端WEB开发之响应式布局:
            1.1 响应式开发原理
                    就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。
                    设备划分                    尺寸区间
                    超小屏幕（手机）             < 768px
                    小屏设备（平板）             >= 768px ~ < 992px
                    中等屏幕（桌面显示器）       >= 992px ~ <1200px
                    宽屏设备（大桌面显示器）     >= 1200px
            1.2 响应式布局容器:
                    响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。
                    原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现
                    不同屏幕下，看到不同的页面布局和样式变化。
                    平时我们的响应式尺寸划分
                         超小屏幕（手机，小于 768px）：设置宽度为 100%
                         小屏幕（平板，大于等于 768px）：设置宽度为 750px
                         中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px
                         大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px\
                    但是我们也可以根据实际情况自己定义划分
            2. Bootstrap前端开发框架
                    Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。
                    2.1 Bootstrap 简介
                             中文官网：http://www.bootcss.com/
                             官网：http://getbootstrap.com/
                             推荐使用：http://bootstrap.css88.com/
                        框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组
                            件和插件。使用者要按照框架所规定的某种规范进行开发。
                        1. 优点
                             标准化的html+css编码规范
                             提供了一套简洁、直观、强悍的组件
                             有自己的生态圈，不断的更新迭代
                             让开发更简单，提高了开发的效率
                        2. 版本
                             2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。
                             3.x.x：目前使用最多,稳定,但是放弃了 IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、
                            移动设备优先的 WEB 项目。
                             4.x.x ：最新版，目前还不是很流行
                        2.2 Bootstrap 使用
                            在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。
                            控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。
                            Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容
                        2.2 Bootstrap 使用
                            在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。
                            2. 创建html骨架结构
                            <!--要求当前网页使用IE浏览器最高版本的内核来渲染-->
                            <meta http-equiv="X-UA-Compatible" content="IE=edge">
                            <!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放-->
                            <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">
                            <!--[if lt IE 9]>
                            <!--解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题-->
                            <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
                            <!--解决ie9以下浏览器对 css3 Media Query 的不识别 -->
                            <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
                            <![endif]-->
                            2. Bootstrap前端开发框架
                            Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容
                            在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。
                            Bootstrap 使用四步曲： 1. 创建文件夹结构 2. 创建 html 骨架结构 3. 引入相关样式文件 4. 书写内容
                        3. 引入相关样式文件
                            <!-- Bootstrap 核心样式-->
                            <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
                        2.3 布局容器
                            Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器，它提供了两个作此用处的类。
                            1. container 类：
                                响应式布局的容器 固定宽度
                                 大屏 ( >=1200px) 宽度定为 1170px
                                 中屏 ( >=992px) 宽度定为 970px
                                 小屏 ( >=768px) 宽度定为 750px
                                 超小屏 (100%)
                            2. container-fluid 类
                                流式布局容器 百分百宽度
                                 占据全部视口（viewport）的容器。
                        3.1 栅格系统简介
                            栅格系统英文为“grid systems”,也有人翻译为“网格系统”，它是指将页面布局划分为等宽的列，然后通
                            过列数的定义来模块化页面布局。
                            Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，
                            系统会自动分为最多12列。
                    3.2 栅格选项参数
                        栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。
                        超小屏幕（手机<768px      小屏设备（平板）>=768px         中等屏幕（桌面显示器）>=992px       宽屏设备（大桌面显示器）>=1200px
.container 最大宽度        自动(100%)               750px                           970px                               1170px
类前缀                      .col-xs-               .col-sm-                     .col-md-                                .col-lg-
列（column）数                                                  12
                         按照不同屏幕划分为1~12 等份
                         行（row） 可以去除父容器作用15px的边距
                         xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大；
                         列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列
                         每一列默认有左右15像素的 padding
                         可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class="col-md-4 col-sm-6"
                    3.3 列嵌套
                        栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。
                        <!-- 列嵌套 -->
                            <div class="col-sm-4">
                                <div class="row">
                                    <div class="col-sm-6">小列</div>
                                    <div class="col-sm-6">小列</div>
                                </div>
                            </div>
                    3.4 列偏移
                        使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。
                        <!-- 列偏移 -->
                            <div class="row">
                                <div class="col-lg-4">1</div>
                                <div class="col-lg-4 col-lg-offset-4">2</div>
                            </div>
                    3.5 列排序
                        通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。
                        <!-- 列排序 -->
                            <div class="row">
                                <div class="col-lg-4 col-lg-push-8">左侧</div>
                                <div class="col-lg-8 col-lg-pull-4">右侧</div>
                            </div>
                    3.6 响应式工具
                        为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。
                        类名        超小屏      小屏    中屏    大屏
                        .hidden-xs 隐藏         可见    可见    可见
                        .hidden-sm 可见         隐藏    可见    可见
                        .hidden-md 可见         可见    隐藏    可见
                        .hidden-lg 可见         可见    可见    隐藏
                        Bootstrap 其他（按钮、表单、表格） 请参考Bootstrap 文档。 
                        与之相反的，visble-xs,visble-sm,visble-md,visble-lg,是显示某个页面内容








             



































