计算机编程基础:
        编程语言:
            编程:就是计算机为解决某个问题而使用某种程序设计语言编写程序代码,并得到结果的过程。
            计算机程序:就是计算机所执行的一系列的指令集合,而程序全都是我们所掌握的语言来编写的。
                所以人们要控制计算机一定要通过计算机语言向计算机发出命令。
            计算机语言:计算机语言指用于人与计算机之间的通讯的语言,它是人与计算机之间传递信息的媒介。
            语言分类:机器语言、汇编语言、高级语言三大类
            编程语言总结:编程语言用来控制计算机的一系列指令,它有固定的格式和词汇(不同编程语言的格式和词汇不一样),
                必须遵守,如今通用的编程语言有两种形式:汇编语言和高级语言。
            汇编语言:汇编语言和机器语言实质相同,都是直接对硬件操作。
            高级语言:主要针对相对低级语言而言,它并不是指某种具体语言,包括很多编程语言,
                常见的有C语言,java,C#，Phthon,PHP,JavaScript，Go语言等
        翻译器:
            高级语言所编制的程序不能直接被计算机所识别,必须经过转换才能被执行,为此我们需要一个翻译器。
            翻译器可以将我们所编写的源代码转换为机器语言,这也称为二进制。记住1和0。
        编程语言和标记语言的区别:编程语言有主动的逻辑行为和行为能力,
            标记语言不向计算机发指令,标记语言用来被读取的,它是被动的。
        计算机基础:
            硬件:输入设备(鼠标、键盘、手写板、摄像头等)、输出设备(显示器、打印机、投影仪)、CPU(负责处理数据与运算)、
                硬盘和内存(负责存储数据、硬盘永久存储数据,内存暂时存储数据)。
            软件:系统软件(Windows、Linuex、macOs)、应用软件(浏览器、qq、微信)。
            数据存储:
                计算机内部使用二进制0和1表示数据
                所有数据,包括文件、图片等都是以二进制形式存放在硬盘中
            数据存储单位:
                bit < byte < kb < GB < TB < 
                bit     1bit可以保存一个0或者1
                1B  = 8b
                1kb = 1024B
                1MB = 1024KB
                1GB = 1024MB
                1TB = 1024GB
            程序运行:
                硬盘  ——  内存条  ——  CPU
                1.打开某个程序时,先从硬盘中把程序的代码加载到内存中
                2.CPU执行内存中的代码
                注意:之所以要内存的一个重要原因,因为CPU运行的太快了,如从硬盘读数据,会浪费cpu性能,
                    所以,才使用存取速度更快的内存来保存运行时的数据(内存是电,硬盘是机械)
初识JavaScript:
          JavaScript是什么?
              运行在客户端的脚本语言
              脚本语言:不需要编译,运行过程中由js解释器(js引擎)逐行来进行解释并执行
              也可基于弄node.js技术进行服务端编程
          HTML/CSS/JS的关系:
              html决定网页的结构内容,相当于人的身体,
              CSS决定网页呈现给用户的模样(决定好不好看),相当于穿衣服、化妆。
              JS实现业务逻辑页面控制(决定功能),相当于人的各种动作。
          浏览器执行js:
              渲染引擎:解析HTML与CSS,俗称内核,比如谷歌浏览器的blink,老版本webkit
              js引擎:也称js解释器。用来读取网页中的JavaScript代码,对其处理后运行,比如谷歌浏览器的V8
          总结:浏览器本身并不会执行js代码,而是通过内置JavaScript引擎(解释器)来执行js代码。js引擎逐行解释
              每一句源码(转换为机器语言),然后由计算机去执行,所以JavaScript语言归为脚本语言,会逐行解释执行。
          JS三部分组成:ECMAScript(js语法)、DOM(页面文档对象模型)、DOM(浏览器对象模型)
              ECMAScript(js语法):规定了JS的编程语法和基础核心知识,是所有浏览器厂商共同遵守的一套js语法工业标准。
              DOM文档对象模型:通过DOM提供的接口可以对页面上的各种元素进行操作(大小、位置、颜色等)。
              BOM(浏览器对象模型):提供独立于内容的,可以与浏览器窗口进行互动的对象结构。
                  可操作浏览器窗口、控制浏览器跳转、获取分辨率等。
          JS书写位置:
              1.行内式js,直接写在元素内部
                  <input type="button" value="唐伯虎" onclick="alert('秋香姐')">
              2.内嵌式js
                  <script>
                    alert('沙漠骆驼');
                  </script>
              3.外部js方法:新建.js文件,内部调用<script src="外部的.js文件"></script>
              js中推荐使用单引号,HTML中推荐使用双引号
          JS注释:
              1.单行注释:  // 单行注释      快捷键:ctrl + /
              2.多行注释:  /* 多行注释 */   快捷键:shift + alt + a 
          JavaScript输入输出语句:
                方法                    说明
              alert               浏览器弹出警示框          
              console.log(msg)    浏览器控制台打印输出信息
              prompt(info)        浏览器弹出输入框,用户可以输入
      变量:
          变量的概述:变量是用于存放数据的容器,通过变量名获取数据,甚至数据可以修改。
          本质:变量是程序在内存中申请一块用来存储数据的空间。
        变量的使用:
            1.声明变量
                var age; 声明一个名称为age的变量
            2.赋值
                age = 18; 把值存入这个变量中
            3.变量的初始化
                var myname = '我叫pink';
            var简介:var是一个js关键字,用来声明变量,使用该关键字声明变量后,计算机会自动为变量分配内存空间,不需要管了
            4.age是自己定义的变量名,我们要通过变量名来访问内存中分配的空间
            5.更新变量:一个变量被重新赋值之后，它原有的值会被覆盖,变量值将以最后一次赋的值为准
            6.同时声明多个变量:只需要写一个var,多个变量名之间使用英文逗号隔开。
            7.只声明不赋值结果underfined未定义
                var sex;
                console.log(sex); //underfined未定义
            8.不声明不赋值,直接报错
                console.log(sex);
            9.不声明直接赋值使用,(因为var是全局变量，所以var会变)
                qq = 110;
                console.log(qq);
        变量的命名规范:
            由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号($)组成,如:usrAge,num01，_name
            每一条语句以分号结尾，不写分号浏览器自动添加，但是会消耗一些性能，分号必须写。
            严格区分大小写,var,app;和var App;是两个变量
            不能以数字开头,18age是错的
            不能是关键字、保留字。例如:var for white
            变量名必须有意义。MMD BBD nl - age
            遵守驼峰命名法。首字母小写,后面单词的首字母需要大写。myfirstName
            推荐翻译网站:有道词典、爱词霸
        注意：尽量不要使用name作为关键名
数据类型简介：
        1.为什么需要数据类型
            在计算机中，不同的数据所占存储空间是不同的,为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。
        2.变量的数据类型：
            JavaScript是一种弱类型或者说动态语言，意味着不用提前声明变量类型，在程序运行过程中，类型会被自动锁定。
        var num = 10;
        在代码运行中，变量的数据类型是由JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕后，变量就确定了数据类型。
        JavaScript拥有动态类型，同时也意味着相同的变量可用作不同的类型：下方案例
        var x = 6;
        var x = '哈哈';
        3.数据类型分类：分为两大类
            简单数据类型：
                1.Number      数字型，包含整型值和浮点型值                            默认 0
                    进制：
                        1.八进制 0 ~ 7 我们程序里面数字前面加0 表示八进制
                                    var num3 = 0x;
                        如果转为进制说明String(a,10)转为十进制或者String(a,8)转为八进制
                        2.十六进制 0 ~ 9 a ~ f  #ffffff   数字前面加0x 表示十六进制
                    最大值:alert(Number.MAX_VALUE)最大值
                    最小值:alert(Number.MIN_VALUE)最小值
                    alert(Infinity);无穷大  // Infinity
                    alert(-Infinity);负无穷小 // -Infinity
                    alert(NaN); //NaN   //非数值
                    isNaN()     //检测判断非数字，并且返回一个值是数字false或者不是数字true
                    尽量不要使用小数点进行运算，可能会得到一个不精确的结果，不要要求进行精确较高的要求
                2.String      字符串，如"张三"注意咱们js里面，字符串都带引号            " "
                    语法：双引号或者单引号
                    HTML标签里面使用双引号，js里面使用单引号
                    字符串转义符：
                        转义符              解释说明
                        \n                    换行符
                        \\                  斜杠
                        \'                  '单引号
                        \"                  ""双引号
                        \t                  tab缩进
                        \b                  空格
                    字符串长度:通过字符串得length属性可以获取整个字符串得长度
                    字符串拼接：多个字符串之间可以使用+进行拼接。字符串+任何类型=拼接之后得新字符串
                    案例：var age = 18;
                         console.log('pink老师' + age + '岁');
                3.Boolean     布尔值类型，如true、false、等价于1和0                   false
                    true表示真(对) = 1;          false表示假(错)= 0;
                4.Underfined  var a; 声明了变量a但是没有给值，此时a = Underfined   Underfined
                    未定义
                    var str; console.log(str);//underfined未定义
                5.Null        var a = null;声明了变量a为空值                          null
                6.检测变量数据类型：typeof();
                    typeof可用来获取检测变量得数据类型
                字面量：字面量表示如何表达这个值
                    比如：数字字面量：9，10，10...
                        字符串字面量：'hahah','巅峰时代',
                        布尔字面量：true,false
            复杂数据类型:
                Object
数据类型转换：
                使用表单、prompt获取过来的数据默认是字符串类型，此时就不能直接简单的进行加法运算，而需要转换
                变量的数据类型。就是把一种类型的变量转换为另一种数据类型
                1.转换为字符串类型：
                    toString()          var num = 1;alert(num.toString());
                    String()强制转换     var num -1;alert(String(num));
                    加号拼接字符串      var num = 1;alert(num + '我是字符串');
                2.转换为数字类型：
                    parseInt(string)        将string类型转换为整数数值类型    parseInt('78')
                    parseFloat(string)函数  将string类型转换为整数数值类型    parseFloat('78.21')
                    Number()强制转换函数     将string类型转换为数值类型         Number('12')
                    js隐式转换(+ - * /)      利用算数运算隐式转换为数值型       '12' - 0
                3.转换为布尔型：
                    Boolean()函数       其它类型转换成布尔         Boolean('true');
                    代表空、否定的值会转换为false，如：""、0、NaN、null、undefined都为false
                            console.log(Boolean(''));           //false
                            console.log(Boolean(0));            //false
                            console.log(Boolean(NaN));          //false
                            console.log(Boolean(null));         //false
                            console.log(Boolean(undefined));    //false
                            console.log(Boolean('123'));        //true
                            console.log(Boolean(12));           //true
            扩展阅读：
                JavaScript属于解释型语言
                解释型语言和编译型语言：
                    1.概述：计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序语言翻译成机器语言才能执行程序，程序语言翻译成机器语言的工具，被称为翻译器。
                    2.翻译器翻译的方式有两种：一个是编译、另外一个是解释。两种方式之间的区别在于翻译的时间点不同
                    3.编译器是在代码执行之前进行编译，生成中间代码文件
                    4.解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称为解释器)
                标识符：就是开发人员为变量、属性、函数、参数取得名字。
                    不能是关键字或者保留字
                    关键字：指JS本身已经使用了得字，不能在用它们充当变量名、方法名
                        如：break,case,catch,continue,default,delete,do,else,
                            finally,for,function,if,in,instanceof,return,
                            switch,this,throw,try,typeof,var,void,while,with等
                    保留字：就是预留得“关键字”，意思是现在虽然还不是关键字，但是未来可能会称为关键字，
                            同样不能使用它们当变量名或方法名。
                        包括：
                            abstract,arguments,boolean,byte,char,class*,const,
                            debugge,double,enum*,eval,export*,extends*,false,
                            final,float,goto,implements,import*,int,interface,
                            let,long,native,new,null,package,private,protected,
                            public,short,static,super*,synchronized,throws,transient,
                            true,volatile,yield	
                标识符命名规范：
                    变量、函数的命名必须要有意义
                    变量的名称一般用名词
                    函数的名称一般用动词
                操作符规范：
                    等号后面等要有空格隔开
                单行注释：
                    后面敲空格在注释
JavaScript运算符：
            运算符也称为操作符，用于实现赋值、比较和执行算数运算等功能得符号。
        算数运算符：
            概念：算数运算使用符号，用于执行两个变量或值得算数运算
                 运算符             描述            实例
                1.  +               加              10 + 20 = 30
                    前置递增++      ++num前置递增就是自加1，类似于num = num + 1;
                    前置递减--
                    后置递增++      num++后置递增也是自加1
                    后置递减--
                    后置递增使用口诀：先返回原值，原变量后自加1
                    后置递增案例：
                            var a = 10;
                            ++a; //a = 11
                            var b = ++a + 2; //12 + 2
                            console.log(b);
                            var c = 10;
                            c++; //c=10 c++11
                            var d = c++ + 2; //11 + 2
                            console.log(d);
                            var e = 10;
                            var f = e++ + ++e; //e++ = 10 e=11 ++e=12
                            console.log(f);
                2.  -               减              10 - 20 = -10
                3.  *               乘              10 * 20 = 200
                4.  /               除              10 / 20 = 0.5
                5.  %               取余数(取整)     返回除法的余数 9 % 2 = 1
                浮点数的精度问题：浮点数值的最高精度是17位，但在进行算数计算时其精确度远远不如整数
                我们不能拿着浮点数来进行相比较 是否相等
                        var num = 0.1 + 0.2;
                        console.log(num == 0.3);
                1.怎么判断一个数能够被整除？
                    余数是0就说明这个数能够被整除，这就是%取余运算符的主要用途
                2.表达式：由数字、运算符、变量等以能求得数值得有意义排列方法所得得组合
                简单理解：由数字、运算符、变量等组成得式子。
                3.返回值：表达式中得结果就是返回值
                    var nam = 1 + 1;
        比较运算符：
                概念：比较运算符(关系运算符)是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值
                (true/false)作为比较运算的结果

                运算符名称       说明            案例        结果
                <               小于号          1<2         true
                >               大于号          1>2         false
                >=              大于等于        2>=2        true
                <=              小于等于        2<=2        false
                ==              判等(隐式转换)  37==37      true
                !=              不等号          37=37       false
                ===  !==        全等以及不全等   37==='37'   false     
                            要求值和数据
                            类型都一致     
                等号口诀：一等赋值，二等判断、三等全等
                    一等 右边值给左边
                    二等  判断，有隐式转换，字符串转数值
        逻辑运算符：
                概念：逻辑运算符用来进行布尔值运算的运算符，其返回值也是布尔值，后面经常用于多个条件判断
                &&          "逻辑与"，简称"与"and       true&&false
                    逻辑与两侧为true，结果才是true,只要有一个false，结果为false
                ||          "逻辑或"，简称"或"or        true||false
                    逻辑或两侧都为false,结果为false，两侧只有一个为true，结果为true，
                !           "逻辑非"，简称"非"not       !true
                    逻辑非取反的
            短路运算(逻辑中断)：
                短路运算原理：当多个表达式(值)时，左边的表达式值可以确定结果时，
                    就不再继续运算右边的表达式的值。
            逻辑中断逻辑与：找false
                语法：表达式1 && 表达式2
                如果第一个表达式的值为真，则返回表达式2
                如果第一个表达式的值为假，则返回表达式1
            逻辑中断逻辑或：找true
                语法：表达式1 && 表达式2
                如果第一个表达式的值为真，则返回表达式1
                如果第一个表达式的值为假，则返回表达式2
                案例：var num = 0;
                    console.log(123 || num++);//123
                    console.log(num) //0
        赋值运算符：
            概念：用来把数据赋值给变量的运算符
            =               直接赋值                var usrName = "我是值";
            +=、-=          加、减一个数，后在赋值    var age = 10; age += 5;//15
            *=、/=、%=、    乘、除取模，后再赋值      var age = 2;age*=5; //10 
        运算符的优先级：
            优先级    运算符          顺序
              1       小括号          ()
              2       一元运算符      ++  -- ！
              3       算数运算符      先*/%后+-
              4       关系运算符      > >= < <=
              5       相等运算符      == != === !==
              6       逻辑运算符      先&&后||
              7       赋值运算符      =
              8       逗号运算符      ,
JavaScript流程控制：
        流程控制概念：简单理解，流程控制就是来控制我们的代码按照什么结构顺序来执行。
        1.顺序结构：
            就是按顺序依次去执行，最简单的流程控制，没有特定的语法结构。按照先后顺序依次去执行。
        2.分支结构：
            由上到下执行代码过程中，根据不同的条件，执行不同路径代码(执行代码多选一的过程)，
            从而得到不同的结果。
            (1)if分支语句：
                语法：
                    if (条件表达式) {
                        //【如果】执行语句
                    } else {
                        //【否则】执行语句
                    }
                执行思路：如果if里面条件表达式结果为真(true)则执行语句1，否则执行语句2
                    如果if条件表达式结果为假(false)，则不执行大括号里面的语句，则执行if语句后面的语句
                多分支语句：
                        if (条件表达式1) {
                                // 执行语句1
                            } else if (条件表达式2) {
                                // 执行语句2
                            } else if (条件表达式3) {
                                // 执行语句3
                            }else {
                                //执行最后语句
                            }
                执行思路：如条件表达式1，满足就执行语句1，执行完毕退出整个if分支，
                    如果条件表达式1不满足，则判断条件表达式2，满足的话执行语句2，以此类推
                    如上面所有条件不满足，则执行else中的语句
            (2)三元表达式：
                三元表达式也能做一些简单的条件选择，有三元运算符组成的式子称为三元，也就是式子中有三个运算符组成
                语法结构:
                    条件表达式? 表达式1 ： 表达式2;
                    执行思路：如有条件表达式1为true，则返回表达式1，如果表达式1为false，则返回表达式2的值
            (3)switch分支语句
                针对变量设置一系列的特定值选项时，就可以使用switch,全等
                switch语句也是多分支语句，它用于基于不同的条件来执行不同的文档。
                        switch (表达式) {
                            case value值1:
                                执行语句1;
                                break;
                            case value值2:
                                执行语句2;
                                break;
                                ......
                                default:
                                    执行最后的语句;
                            }           
                执行思路：利用我们的表达式值和case后面的选项值相匹配，如果匹配上，就执行该case里面的语句，如果都没有匹配上，那么执行default里面的语句。  
            值特定的话，用switch  
            breaK:如果当前的case里面没有break则不会退出switch，，继续执行下一个case
            注意：确定固定值得情况下使用switch，判断范围使用if...else...if，
                switch语句进行条件判断后直接执行到程序得条件语句，效率更高，if中判断多次。
                
        3.循环结构：
            循环的目的：可以重复执行某些代码
            循环体：一组被重复执行的语句称之为循环体，能否继续重复执行，取决于终止条件。
                循环体及循环的终止条件组成的语句，称之为循环语句。
            1.for循环
                for循环主要用于把某些代码循环若干次，通常跟计数有关系。语法如下：
                        for(初始化变量;条件表达式;操作表达式;) {
                            //循环体
                        }
                    (1).初始化变量：就是用var声明的一个普通变量，通常用于作为计数器使用
                    (2).条件表达式：就是用来决定每一次循环是否继续执行，就是终止的条件
                    (3).操作表达式：是每次循环最后执行的代码，经常用于我们计数器变量(递增或者递减)
                    案例：
                            for (var i = 1; i <= 100; i++) {
                                console.log('你好吗');
                            }
                        执行思路：1.首先执行var i = 1;在for里面只执行一次
                                2.然后去i < 100;判断是否满足条件，如满足条件执行循环体，不满足退出循环
                                3.最后去执行里面的i++;
            2.双重for循环：
                        1.很多情况下，单层for循环不能满足我们的需求，比如我们要打印一个5行5列的图形，打印一个倒直角三角形，此时就可以通过循环嵌套来实现。
                        2.嵌套循环是指一个循环语句中再定义一个循环语句的语法结构，例如再for循环语句中，可以再嵌套一个for循环语句我们称之为双重for循环。
                        for(外层的初始化变量;外层的条件表达式;外层的操作;) {
                                外层执行语句
                            for(里层的初始化变量;里层的条件表达式;里层的操作){
                                里层的执行语句；
                            }
                        }
                        注意事项：1.我们可以把里面的循环看作是外层循环的语句
                                2.外层循环循环一次，里面的循环执行全部
                                3.外层表示行，里层表示列

            3.while循环
                while语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环，while语句的语法结构如下
                    while(条件表达式) {
                        //循环体代码
                    }
                执行思路：1.先执行条件表达式，如果结果为true，则执行循环体代码，如果为false，则退出循环，执行
                后面代码
                2.执行循环体代码
                3.循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为false时，整个循环过程才会结束。
                案例：  
                        var num = 1;
                        while (num <= 100) {
                            console.log('好啊油');
                            num++;
                        }
                里面也有计数器，初始化变量
                里面应该也有操作表达式，完成计数器的更新，防止死循环
            4.do...while循环
                do...while语句其实是while语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。
                (1)、语法结构：
                    do{
                        //循环体
                    }while(条件表达式)
                (2)、执行思路:跟while不同的地方在于do...while先执行一次循环体，在判断条件，
                如果条件为真，则继续执行循环体，否则退出循环。
                注意：先执行循环体，在判断，我们会发现do...while循环语句至少会执行一次循环体代码。
            1.while和do...while1可做为复杂的判断条件，比for循环更灵活一些
            2.while和do...while执行顺序不一样,while先判断后执行，do...while1先执行一次，在判断执行
            3.while和do...while执行次数不一样，do..while至少会执行一次循环体，而while可能一次也不执行
continue关键字:退出本次循环，继续执行剩余次数循环
            continue关键字用于立即跳出本次循环，继续下一次循环体(本次循环体中continue之后的代码就会少执行一次。)
            例如：吃了5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码如下：
                    for (var i = 0; i <= 100; i++) {
                            if (i == 3) {
                                continue;   //只能遇见continue就退出本次循环，直接跳到i++
                            }
                            console.log('我正在吃第' + i + '个包子');
                        }                
break关键字：退出整个循环
            break关键字用于立即退出整个循环(循环结束)。
            例如：吃5个包子，吃到第3个包子有虫子，其余不吃了，代码如下：
                    for (var i = 1; i <= 5; i++) {
                            if (i == 3) {
                                break;
                            }
                        console.log('我正在吃第' + i + '个包子');   
                    }
JavaScript数组:
            数组的概念：数组就是一组数据的集合，其中每个数据被称作为元素，在数组中可以存放任意类型的元素。
                数组是一种将一组数据存储在单个变量名下的优雅方式。
            数组创建方式：
                第一种：利用new创建数组
                    var 数组名 = new Array();
                        var arr1 = new Array(); 创建了一个空数组
                        var arr1 = new Array(); 这个2表示数组的长度为2，里面有2个空数组元素
                        var arr1 = new Array(2,3)  等价于[ 2, 3],这样表示里面2个数组元素2和3
                第二种：利用数组字面量创建数组
                    var 数组名 = [];
                    var arr = [];//创建一个空数组
                    var 数组名 = ['小白','小黑','大黄','锐气'];
                    var arr1 = [1,'hah1',true,];
                    1.我们数组里面的数据一定要用逗号分离
                    2.数组里面的数据比如1,2,我哦们称之为数组元素
                    3.声明数组并赋值称为数组的初始化
                    4.数组类型可以存放任意类型的数据，例如字符串，数字，布尔值等
            数组的索引:
                    索引[下标]:用来访问数组元素的序号，(数组下标从0开始)。
                    var arr = [   0,  1,  2,   3,  4  ];
                            索引号： 0   1    2   3   
                    数组通过索引来访问、设置、修改对应的数组元素，我们可以通过“数组名[索引]”的形式来获取数组中的元素。
                    console.log(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]);arr[5]显示underfined
            遍历数组：
                遍历：就是把数组中的每个元素从头到尾访问一次(类似我们每天早上学生的点名)。
                数组的长度：数组名.length
                        var arr = ['red', 'green', 'blue'];
                    for (var i = 0; i < arr.length; i++) {
                        console.log(arr[i]);
                    }
                1.数组的长度就是元素的个数，不要跟索引号混淆
                2.arr.length动态监测数组元素的个数
            数组中新增元素：
                1.通过修改length长度实现数组扩容目的
                length属性是可读写的,
                可通过修改数组索引方式追加数组元素
                不能直接给数组名赋值，否则会覆盖掉以前的数据
            检测是否为数组：
                (1).instanceof 运算符，它可以用来检测是否为数组
                        var arr = [];
                        console.log(arr instanceof Array);
                (2).Array.isArray(参数);
                        console.log(Array.isArray(arr));
            (1).push(); 末尾添加元素，并返回新的长度
            (2).pop();  删除数组最后一个长度，返回它删除的元素的值,里面没有参数
            (3).unshift();数组开头添加，修改原数组，返回新的长度
            (4).shift();删除数组第一个长度，修改原数组，并返回第一个元素的值,里面没有参数
            (5).concat():连接数组，不影响原数组，返回一个新数组
            (6).slice():数组截取slice(begin,end),返回被截取项目的新数组
            (7).splice():数组删除splice(第几个开始，要删除个数)，返回被删除项目得新数组，会影响原数组
            (8).数组排序：
                reverse():翻转数组
                sort():数组排序,单独写有问题，必须括号里面加function
                        var arr2 = [12, 324, 45, 65, 2];
                        arr2.sort(function(a, b) {
                            return a - b;  升序得顺序排列，如果降序b-a
                        });
                        console.log(arr2);
            (9).数组索引方法：
                indexOf():  查找第一个索引，存在返回索引号，不存在返回-1,只返回第一个满足条件得索引值
                lastIndexOf():查找最后一个索引，存在返回索引号，不存在返回-1，只返回第一个满足条件得索引值
            (10).数组去重案例：
                function unique(arr) {
                    var newarr = [];
                    for(var i = 0; i < arr.length;i++) {
                        if(newarr.indexOf(arr[i] === -1)) {
                            newarr.push(arr[i])
                        }
                    }
                    return newarr;
                }
                var result = unique(['red','blue','red','green'])
                console.log(result);
            (11).数组转换为字符串
                toString():数组转换为字符串
                    var arr = [1,2,3];
                    console.log(arr.toString()); //1,2,3
                join('分隔符');
                    console.log(arr.join('-'));
JavaScript函数：
            函数的概念：
                函数就是封装了一段可以被重复执行调用的代码块，
                目的：就是让代码重复使用
            函数的使用：
                1.声明函数
                     function 函数名() {
                         // 函数体
                     }
                    function saHi() {
                        console.log('hi~');
                    }
                     (1).function声明函数的关键字，全部小写
                     (2).函数是做某件事情，函数名一般是动词，saHi
                     (3).函数不调用自己不执行
                2.调用函数
                     saHi(saHi);
                     口诀：函数不调用，自己不执行
                     注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码
            函数的封装：
                函数的封装把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口
                简单理解：封装类似于将电脑配件整合组装到机箱中(类似快递打包)
            函数的参数:
                1.形参：
                    function 函数名(形参1;形参2...) { //形式上的参数

                    }
                实参：函数名(实参1,实参2....); //实际参数
                2.形参和实参执行过程：
                    function cook(aru) { //形参是接收实参的，aru = '酸辣土豆丝'
                        console.log(aru);
                    }
                    cook('酸辣土豆丝');
                    cook('大肘子');
                参数的主要作用：在函数内部某些值不能固定，我们可以通过参数在调用函数的传递不同的值进去。
                3.实参的个数和形参的个数一致，则正常输出结果
                4.如果实参的个数多于形参的个数，会取决形参的个数
                5.如果实参的个数少于形参的个数，结果NaN
                    形参可以看做是不用声明的变量，num2是一个变量但是没有接收值，结果就是underfined
                注意：在JavaScript中，形参默认值是underfined
            函数的返回值：
                function 函数名() {
                    return 需要返回的结果；
                }
                函数名();
                1.return 终止函数
                2.return 只返回一个值
                3.加减乘除结果      return [num1 + num2, num1 - num2,num1 * num2,num1 / num2];
                返回值2个注意事项：
                    break: 结束档前循环体
                    continue：跳出本次循环，继续执行下次循环（如for、while）
                    return:不仅可以退出循环，还能够返回return语句中的值，同时还可以结束当前的函数体内的代码 
            arguments的使用:
                我们不确定有多少个参数传递的时候,可以用arguments来获取,在JavaScript中,argument实际上它是
                当前函数的一个内置对象,所有函数都内置了一个argument对象,arguments对象中存储了传递的所有实参.
                // arguments使用,只有函数才有arguments对象,而且是每个函数都内置好了这个arguments
                function fn() {
                    console.log(arguments); //里面存储了所有传递过来的实参
                    console.log(arguments.length);
                }
                fn(1, 2, 3);
                // 伪数组 并不是真正意义上的数组
                // 1.具有数组的length属性
                // 2.按照索引的方式进行存储
                // 3.它没有真正数组的一些方法  pop()  push()等等
            函数可以调用另一个函数:
                    因为每个函数都是独立的代码块,用于完成特殊任务,因此经常会用到函数相互调用的情况.
                <script>
                    // 函数可以相互调用的
                    function fn1() {
                        console.log(11);
                        fn2(); // fn1函数里面调用了fn2函数
                    }
                    fn1();

                    function fn2() {
                        console.log(22);
                    }
                </script>
            函数案例
            函数的两种声明方式:
                1.利用函数关键字自定义函数(命名函数)
                    function fun() {

                    }
                    fun();
                2.函数表达式(匿名函数)
                    var 变量名 = function (){};
            作用域:
                1.javascript作用域:一段代码中所用到的名字并不总是有效和可用的,
                            而跟定这个名字的可用性的代码范围就是这个名字的作用域.
                            作用域的使用提高了程序逻辑的局部性,增强了程序的可靠性,减少名字的冲突.
                2.js的作用域(es6)之前:全局作用域   局部作用域
                    (1).全局作用域:
                        整个JavaScript标签,或者单独的js文件
                    (2).局部作用域(函数作用域):在函数内部就是局部作用域,
                        这个代码的名字只在函数内部起效果和作用
                3.变量的作用域:根据作用域的不同我们变量分为全局变量和局部变量
                    (1).全局变量:在全局作用域下的变量,在全局下都可以使用
                    var num = 10;
                    console.log(num);
                    (2).局部变量:在局部作用域下的变量,后者在函数内部的变量就是局部变量,
                        在函数内部没有var声明的也叫全局变量
                        function fn() {
                            var num1 = 10; //num1就是局部变量,只能在函数内部使用
                        }
                        fn();
                    3.从执行效率来看全局变量和局部变量
                        (1).全局变量只有浏览器关闭的时候才会销毁,比较占内存资源
                        (2).局部变量,当我们程序执行完毕就会销毁,比较节约内存资源
                    js中没有块级作用域,js作用域:全局作用域,局部作用域
                    我们es6的时候新增块级作用域:
                        块级作用域 { }  if{ } for{ }
                    4.作用域链：
                        内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称作为作用域链，就近原则。谁离着近就选谁
                        var num = 10;
                        function fn() {
                            var num = 20;
                            function fun() {
                                console.log(num);
                            }
                            fun();
                        }
                        fn();
            预解析：
                    1.我们js引擎运行js，分为两步：预解析，代码执行
                        (1).预解析 js引擎会把js里面所有的var 还有function提升到当前作用域的最前面
                        (2).代码执行，按照代码书写的顺序从上到下执行
                    2.预解析分为：变量预解析(变量提升)和函数预解析(函数提升)
                        (1).变量提升就是把所有的变量声明提升到当前的作用域最前面，不提升赋值操作
                        (2).函数提升就是把所有的函数声明提升到当前作用域的最前面，不调用函数
            立即执行函数：创建独立作用域
                    立即执行函数，不需要调用，立马能够自己执行的函数
                    1.第一种(function() {} ());
                        (function(c, d) {
                            console.log(c + d);
                        }(12, 12))
                    2.第二种(function(){})();
                    (function(a, b) {
                        console.log(a + b);
                    })(10, 20);
                立即执行函数最大的作用就是，独立创建了一个作用域，里面所有的变量都是局部变量，不会有命名冲突
对象：
    什么是对象？
        对象是一个具体的事物，看的见摸得着的事物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个数据库、一张网页、一个远程服务器连接也可以是“对象”。
        对象是由属性和方法组成：
            (1).属性：事物的特征，在对象中属性来表示（常用名词）
            (2).方法：事物的行为，在对象中用方法来表示（常用动词）
        保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果要保存一个人的完整信息呢？
        创建对象的三种方法：
            1.利用字面量创建对象
                对象字面量 { }
                var obj = { };//创建了一个空的对象
                var obj = { };
            案例：  
                var obj = {
                        uname: '张三丰',
                        age: 19,
                        sex: '男',
                        sayHi: function() {
                            console.log('Hi~');
                        }
                    }
                调用的第一种方法： console.log(obj.uname, obj.age, obj.sex);
                调用的第二种方法：console.log(obj['uname'], obj['age'], obj['sex']);
                方法的调用：obj.sayHi();
                (1).里面的属性或者方法我们采用的是键值对的形式  键 属性名：值 属性值
                (2).多个属性或者方法中间用逗号隔开
                (3).方法冒号后面跟的是一个匿名函数
            2.利用new Object创建对象
                var obj = new Object(); //创建了一个空对象
                obj.uname = '张三丰';
                obj.age = 18;
                obj.sex = '男';
                obj.saihi = function() {
                    console.log('saihi~');
                }
                调用方式一：console.log(obj.name);
                调用方式二：console.log(obj['name']);
                调用方法：obj.saihi();
                (1).我们利用等号 = 赋值的方法 添加对象的属性和方法
                (2).每个属性和方法之间用分号结束
            3.构造函数创建对象
                我们为什么使用构造函数对象
                就是因我们前面两种创建对象的方式只能创建一个和对象
                因此我们一次创建一个对象，里面很多的属性和方法是大量相同的，我们只能复制
                因此我们可以利用函数的方法：重复这些相同的代码，我们就把这个函数称为构造函数
                又因为这个函数不一样，里面封装的不是普通代码，而是对象
                构造函数就是把我们对象里面一些相同的属性和方法抽象出来封装到函数
                        // 构造函数的语法格式
                    function 构造函数名() {
                        this.属性 = 值；
                        this.方法 = function() {}
                    } 
                    new 构造函数名();
                1.构造函数名字首字母要大写
                案例：
                    function Star(uname, age, sex) {
                        this.name = uname;
                        this.age = age;
                        this.sex = sex;
                    }
                    var ldh = new Star('刘德华', 18, '男');
                    var zxy = new Star('张学友', 20, '男');
                    // 构造函数名字手写字母要大写
                    // 我们构造函数不需要return,就可以返回结果
                    // 我们调用构造函数，必须使用new
                    // 我们只要new Star()调用函数就创建一个对象 ldh {}
                4.构造函数和原型对象:prototype
                        构造函数对象原型prototype
                        构造函数通过原型的函数是所有对象所共享的
                        JavaScript规定,每一个构造函数都有一个prototype属性,指向另一个对象,
                            注意这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有.
                        我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法.
                        原型的作用就是共享方法
                        案例:
                            <script>
                                function Star(name, age, sex) {
                                    this.name = name;
                                    this.age = age;
                                    this.sex = sex;
                                }
                                Star.prototype.sing = function() {
                                    console.log('唱歌');
                                }
                                var ldh = new Star('刘德华', 10, '男');
                                var zxy = new Star('张学友', 30, '男');
                                ldh.sing();
                                zxy.sing();
                            </script>
                        一般情况下,我们公共属性定义到构造函数里面,公共的方法我们方放到原型对象身上
            4.变量、属性、函数、方法的区别：
                1.变量和属性的相同的，它们都是用来保存数据的
                var num = 10;
                var obj = {
                    age: 19,
                }
                变量：单独声明并赋值，使用的时候直接写变量名，单独存在
                属性：在对象里面的不需要声明的，使用的时候必须 对象.属性
                2.函数和方法的相同点：都是实现某种功能，做某件事
                函数：单独声明，并且调用的函数名() 单独存在的
                方法：在对象里面，调用的时候，对象.方法()
            5.对象的实例化：利用构造函数创建对象的过程我们也称为对象的实例化
            6.new关键字执行过程：
                1.new构造函数可以在内存中创建了一个空的对象
                2.this就会指向刚才创建的空对象
                3.执行构造函数里面的代码，给这个空对象添加属性和方法
                4.返回这个对象
    遍历对象：
            for...in语句用于数组或者对象的属性进行循环操作，建议对对象进行遍历最合适的
            案例：  
                var obj = {
                    name: 'pink老师',
                    age: 18,
                    sex: '男',
                }
                for (var k in obj) {
                    console.log(k); k 变量 输出 得到的是 属性名
                    console.log(obj[k]); obj[k] 得到的是 属性值
                }
            我们使用for  in  里面的变量，我们喜欢写k 或者 key
JavaScript内置对象：
            1.JavaScript中的对象分为3种：前面学的自定义对象、内置对象、浏览器对象。           
            2.内置对象：就是指js语言自带的一些对象，这些对象提供开发者使用，
                    并提供了一些的或是最基本而必要的功能（属性和方法）
            3.内置对象最大优点就是帮助我们快速开发。
            查文档：MDN和W3c
            (1)Math数学对象：分为两种属性和方法
                不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可
                属性：
                    Math.PI：圆周率，一个圆的周长和直径之比，约等于 3.14159。
                方法：
                    ~ Math.max():返回零到多个数值中最大值。
                    ~ Math.min():返回零到多个数值中最小值。
                .返回给定的一组数字中的最大值。如果给定的参数中至少有一个参数无法被转换成数字，则会返回 NaN。
                .如果没有参数，则结果为 - Infinity。
                .如果有任一参数不能被转换为数值，则结果为 NaN。
                    ~ Math.floor(); 向下取整,案例：console.log(Math.floor(1.9));
                    ~ Math.ceil();  向上取整,案例：console.log(Math.ceil(1.1));
                    ~ Math.round(); 四舍五入，案例：console.log(Math.round(1.4));
                    ~ Math.abs();   绝对值,隐式转换(会把字符串转换数字型)
                    ~ Math.random(); 随机数。返回一个浮点数,  伪随机数在范围从0到小于1，
                                    也就是说，从0（包括0）往上，但是不包括1（排除1）
                        案例：随机点名
                            function getRandomIntInclusive(min, max) {
                                min = Math.ceil(min);
                                max = Math.floor(max);
                                return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 
                            }
                            var arr = ['张三', '李四', '王五', '里斯', '赚三']
                            console.log(arr[getRandomIntInclusive(0, arr.length-1)]);
                (二)、Date() 日期对象，是一个构造函数，必须使用new来调用创建我们的日期对象
                            var date = new Date();
                            1.console.log(date); //使用Date，如果没有参数，返回当前系统的当前时间
                            2.参数常用的写法，数字型2022，10，1，或者字符串型'2019-10-1 8:8:8'
                        var date = new Date();
                        console.log(date.getFullYear()); //返回当前年
                        console.log(date.getMonth() + 1); //返回月份(0~11)
                        console.log(date.getDate()); //返回日期
                        console.log(date.getDay()); //返回星期(0-6)周日返回0
                        console.log(date.getHours()); //返回时
                        console.log(date.getMinutes()); //返回分
                        console.log(date.getSeconds()); //返回秒
                        封装秒：
                            function getTime() {
                                var date = new Date();
                                var h = date.getHours();
                                h = h < 10 ? '0' + h : h;
                                var m = date.getMinutes();
                                m = m < 10 ? '0' + h : h;
                                var s = date.getSeconds();
                                s = s < 10 ? '0' + s : s;
                                return h + ':' + m + ':' + s;
                            }
                            var res1 = getTime();
                            console.log(res1);
                   2. 获得Date总的毫秒数，不是当前时间的毫秒数，而是距离 1970年1月1日号过了多少毫秒
                        通过:获取毫秒数
                            valueOf()  
                            getTime()
                            var date = +new Date();
                            Date.now();
                        案例：
                            var date = new Date();
                            var hs = date.valueOf();
                            var hs2 = date.getTime();
                            console.log(hs);
                            console.log(hs2);
                        案例2：时间戳
                            function gettime(timer) {
                               var nowtime = +new Date(); //现在的时间戳
                               var wltime = +new Date(timer); //将来的时间戳
                               var sytime = (wltime - nowtime) / 1000; //剩余的时间戳
                               console.log(ytime);
                               // 天时分秒
                               var t = parseInt(sytime / 60 / 60 / 24); //天
                               var h = parseInt(sytime / 60 / 60 % 24); //时
                               var m = parseInt(sytime / 60 % 24); //分
                               var s = parseInt(sytime % 60); //秒
                               return t + '天' + h + '时' + m + '分' + s + '秒';
                            var res = gettime('2022-3-18 19:00:00');
                            onsole.log(res);
        基本包装类型：
                就是把简单数据类型包装成为了复杂数据类型。这就是简单数据类型有length的原因
                var str = 'andy';
                console.log(str.length);
                1.简单数据类型包装成复杂数据类型
                var temp = new String('andy');
                2.把临时变量得值给str
                str = temp;
                3.销毁这个临时变量
                temp = null;
        字符串的不可变：
                指的里面的值不可变，虽然看上去可以改变内容，但其实地址变了，内存中开辟了一个内存空间
                var str = 'andy';
                str = 'red';
                console.log(str);
        根据字符串返回位置：
                1.str.indexOf('要查找的字符',[起始位置索引]);
                2.str.lastIndexOf('要查找的字符',[起始位置索引]);
                var str = '改革春风吹满地';
                console.log('春');
                console.log('春',3); 从索引号 3的位置开始往后查找
        根据位置返回字符：
                charAt(index): 根据位置返回字符，使用：str.charAt();
                charCode(index):获取指定位置处字符的ASCII码,str.charCodeAt();
                str[index]:获取指定位置处字符，HTML5
        字符串操作方法：
                1.concat('字符传1','字符串2'.....)
                var str = 'andy';
                console.log(str.concat('red'));
                2.substr('截取的起始位置','街区的几个字符'); 
                var str1 = '改革春分吹满地';
                console.log(str1.substr(2,2));
                